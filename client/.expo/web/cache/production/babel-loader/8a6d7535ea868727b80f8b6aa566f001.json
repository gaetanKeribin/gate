{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var initialState={conversations:[],conversationsIds:[],interlocutorsIds:[],lastUpdatedAt:null,isLoaded:false,isFetchingConversations:false,isFetchingConversation:false};import _ from\"lodash\";var copyAndUpdate=function copyAndUpdate(array,i,update){var copy=[];if(i>0)copy.concat(array.slice(0,index));copy.concat(_objectSpread({},array[index],{},update));copy.concat(index+1);return copy;};export default function(){var _action$payload;var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var i=_.findIndex(state.conversations,{_id:(_action$payload=action.payload)==null?void 0:_action$payload.conversation_id});switch(action.type){case\"REQUEST_CONVERSATIONS:SUCCESS\":return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,conversations:action.payload.conversations,isLoaded:true});case\"REQUEST_CONVERSATION:SUCCESS\":return _objectSpread({},state,{conversations:copyAndUpdate(state.conversations,i,action.payload.conversation),lastUpdatedAt:action.receivedAt,isLoaded:true});case\"RECEIVE_READ_ACK\":return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,conversations:copyAndUpdate(state.conversations,i,{readAck:action.payload.reacAck}),isLoaded:true});case\"RECEIVE_WRITING_ACK\":return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,conversations:copyAndUpdate(state.conversations,i,{writing:action.payload.writing})});case\"RECEIVE_NEW_CONVERSATION\":return _objectSpread({},state,{conversations:[action.payload.conversation].concat(_toConsumableArray(state.conversations)),lastUpdatedAt:action.receivedAt});case\"RECEIVE_NEW_MESSAGE\":return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,conversations:copyAndUpdate(state.conversations,i,{lastMessage:action.message,messages:Array.isArray(state.conversations[i].messages)?[action.message].concat(_toConsumableArray(state.conversations[i].messages)):[action.message]})});case\"REQUEST_LOG_OUT:SUCCESS\":return initialState;default:return state;}}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","copyAndUpdate","array","i","update","copy","concat","slice","index","state","action","findIndex","_id","payload","conversation_id","type","receivedAt","conversation","readAck","reacAck","writing","lastMessage","message","messages","Array","isArray"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\nconst copyAndUpdate = (array, i, update) => {\n  let copy = [];\n\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat({ ...array[index], ...update });\n  copy.concat(index + 1);\n\n  return copy;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations, {\n    _id: action.payload?.conversation_id,\n  });\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: action.payload.conversations,\n        isLoaded: true,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: copyAndUpdate(\n          state.conversations,\n          i,\n          action.payload.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          readAck: action.payload.reacAck,\n        }),\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          writing: action.payload.writing,\n        }),\n      };\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.payload.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"RECEIVE_NEW_MESSAGE\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          lastMessage: action.message,\n          messages: Array.isArray(state.conversations[i].messages)\n            ? [action.message, ...state.conversations[i].messages]\n            : [action.message],\n        }),\n      };\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}