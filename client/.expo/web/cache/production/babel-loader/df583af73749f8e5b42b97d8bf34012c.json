{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useContext,useState,useEffect}from\"react\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import FlatList from\"react-native-web/dist/exports/FlatList\";import{connect}from\"react-redux\";import{ThemeContext,Button,Icon}from\"react-native-elements\";import{sendMessage as _sendMessage,fetchConversation as _fetchConversation}from\"../actions/chatActions\";import _ from\"lodash\";var Message=function Message(_ref){var message=_ref.message,incoming=_ref.incoming,theme=_ref.theme;return React.createElement(View,{style:{flexDirection:\"row\"}},!incoming&&React.createElement(View,{style:{flex:1}}),React.createElement(View,{style:{backgroundColor:incoming?\"white\":theme.colors.primary,borderTopLeftRadius:incoming?10:0,borderTopRightRadius:!incoming?10:0,borderBottomLeftRadius:!incoming?10:0,borderBottomRightRadius:incoming?10:0,maxWidth:\"80%\",paddingHorizontal:8,paddingVertical:8,marginBottom:8,marginHorizontal:8}},React.createElement(Text,{style:{color:!incoming?\"white\":\"black\",textAlign:incoming?\"left\":\"right\"}},message.text)),incoming&&React.createElement(View,{style:{flex:1}}));};var RoomScreen=function RoomScreen(_ref2){var chat=_ref2.chat,sendMessage=_ref2.sendMessage,route=_ref2.route,auth=_ref2.auth,fetchConversation=_ref2.fetchConversation;var conversation_id=route.params.conversation_id;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),newMessage=_useState2[0],setNewMessage=_useState2[1];var _useContext=useContext(ThemeContext),theme=_useContext.theme;var conversation=chat.conversations.filter(function(conv){return conv._id===conversation_id;})[0];var interlocutor=conversation.participants.filter(function(participant){return participant._id!==auth.user._id;})[0];useEffect(function(){function fetchData(){conversation_id&&fetchConversation(conversation_id);}fetchData();},[]);var onSendMessage=function onSendMessage(){if(!newMessage){return;}sendMessage({message:{text:newMessage,sentAt:new Date()},conversation_id:conversation_id});setNewMessage(\"\");};return React.createElement(View,{style:{flex:1,justifyContent:\"space-between\"}},React.createElement(View,{style:{flexDirection:\"row\"}},React.createElement(View,{style:{width:40}}),React.createElement(Text,{style:{top:-50,zIndex:10,paddingTop:5,paddingRight:20,alignItems:\"center\",justifyContent:\"center\",textAlign:\"right\",fontSize:20,flex:1}},_.capitalize(interlocutor.firstname)+\" \"+_.capitalize(interlocutor.lastname))),React.createElement(FlatList,{data:chat.conversations.filter(function(conv){return conv._id===conversation_id;})[0].messages,renderItem:function renderItem(_ref3){var item=_ref3.item;return React.createElement(Message,{message:item,incoming:item.sender!==auth.user._id,theme:theme});},keyExtractor:function keyExtractor(item){return item._id;},inverted:true}),React.createElement(View,{style:{flexDirection:\"row\",backgroundColor:\"white\",paddingVertical:8,paddingHorizontal:16,alignItems:\"center\",justifyContent:\"center\",alignContent:\"center\"}},React.createElement(TextInput,{style:{height:40,flex:1},onChangeText:function onChangeText(text){return setNewMessage(text);},value:newMessage,multiline:true,placeholder:\"Ecrivez votre message ici.\"}),React.createElement(Button,{icon:React.createElement(Icon,{name:\"send\",size:20,color:newMessage?theme.colors.primary:theme.colors.grey2}),disabled:!newMessage,type:\"clear\",onPress:function onPress(){return onSendMessage();}})));};var mapStateToProps=function mapStateToProps(state){return{chat:state.chat,auth:state.auth};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{sendMessage:function sendMessage(message){return dispatch(_sendMessage(message));},fetchConversation:function fetchConversation(conversation_id){return dispatch(_fetchConversation(conversation_id));}};};export default connect(mapStateToProps,mapDispatchToProps)(RoomScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/MessagesRoomScreen.js"],"names":["React","useContext","useState","useEffect","connect","ThemeContext","Button","Icon","sendMessage","fetchConversation","_","Message","message","incoming","theme","flexDirection","flex","backgroundColor","colors","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","maxWidth","paddingHorizontal","paddingVertical","marginBottom","marginHorizontal","color","textAlign","text","RoomScreen","chat","route","auth","conversation_id","params","newMessage","setNewMessage","conversation","conversations","filter","conv","_id","interlocutor","participants","participant","user","fetchData","onSendMessage","sentAt","Date","justifyContent","width","top","zIndex","paddingTop","paddingRight","alignItems","fontSize","capitalize","firstname","lastname","messages","item","sender","alignContent","height","grey2","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { View, Text, TextInput, FlatList } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport { sendMessage, fetchConversation } from \"../actions/chatActions\";\nimport _ from \"lodash\";\n\nconst Message = ({ message, incoming, theme }) => {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\"\n      }}\n    >\n      {!incoming && <View style={{ flex: 1 }}></View>}\n      <View\n        style={{\n          backgroundColor: incoming ? \"white\" : theme.colors.primary,\n          borderTopLeftRadius: incoming ? 10 : 0,\n          borderTopRightRadius: !incoming ? 10 : 0,\n          borderBottomLeftRadius: !incoming ? 10 : 0,\n          borderBottomRightRadius: incoming ? 10 : 0,\n          maxWidth: \"80%\",\n          paddingHorizontal: 8,\n          paddingVertical: 8,\n          marginBottom: 8,\n          marginHorizontal: 8\n        }}\n      >\n        <Text\n          style={{\n            color: !incoming ? \"white\" : \"black\",\n            textAlign: incoming ? \"left\" : \"right\"\n          }}\n        >\n          {message.text}\n        </Text>\n      </View>\n      {incoming && <View style={{ flex: 1 }}></View>}\n    </View>\n  );\n};\n\nconst RoomScreen = ({ chat, sendMessage, route, auth, fetchConversation }) => {\n  const { conversation_id } = route.params;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { theme } = useContext(ThemeContext);\n  const conversation = chat.conversations.filter(\n    conv => conv._id === conversation_id\n  )[0];\n  const interlocutor = conversation.participants.filter(\n    participant => participant._id !== auth.user._id\n  )[0];\n\n  useEffect(() => {\n    function fetchData() {\n      conversation_id && fetchConversation(conversation_id);\n    }\n    fetchData();\n  }, []);\n\n  const onSendMessage = () => {\n    if (!newMessage) {\n      return;\n    }\n    sendMessage({\n      message: {\n        text: newMessage,\n        sentAt: new Date()\n      },\n      conversation_id\n    });\n    setNewMessage(\"\");\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n      <View style={{ flexDirection: \"row\" }}>\n        <View style={{ width: 40 }}></View>\n        <Text\n          style={{\n            top: -50,\n            zIndex: 10,\n            paddingTop: 5,\n            paddingRight: 20,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            textAlign: \"right\",\n            fontSize: 20,\n            flex: 1\n          }}\n        >\n          {_.capitalize(interlocutor.firstname) +\n            \" \" +\n            _.capitalize(interlocutor.lastname)}\n        </Text>\n      </View>\n      <FlatList\n        data={\n          chat.conversations.filter(conv => conv._id === conversation_id)[0]\n            .messages\n        }\n        renderItem={({ item }) => (\n          <Message\n            message={item}\n            incoming={item.sender !== auth.user._id}\n            theme={theme}\n          />\n        )}\n        keyExtractor={item => item._id}\n        inverted={true}\n      />\n      <View\n        style={{\n          flexDirection: \"row\",\n          backgroundColor: \"white\",\n          paddingVertical: 8,\n          paddingHorizontal: 16,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\"\n        }}\n      >\n        <TextInput\n          style={{\n            height: 40,\n            flex: 1\n          }}\n          onChangeText={text => setNewMessage(text)}\n          value={newMessage}\n          multiline\n          placeholder=\"Ecrivez votre message ici.\"\n        />\n        <Button\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={newMessage ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!newMessage}\n          type=\"clear\"\n          onPress={() => onSendMessage()}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    chat: state.chat,\n    auth: state.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    sendMessage: message => dispatch(sendMessage(message)),\n    fetchConversation: conversation_id =>\n      dispatch(fetchConversation(conversation_id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomScreen);\n"]},"metadata":{},"sourceType":"module"}