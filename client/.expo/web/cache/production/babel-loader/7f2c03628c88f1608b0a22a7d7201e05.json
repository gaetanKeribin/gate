{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useContext,useState,useEffect}from\"react\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import FlatList from\"react-native-web/dist/exports/FlatList\";import{connect}from\"react-redux\";import{ThemeContext,Button,Icon}from\"react-native-elements\";import{sendMessage as _sendMessage,fetchConversation as _fetchConversation}from\"../../actions/chatActions\";import _ from\"lodash\";var Message=function Message(_ref){var message=_ref.message,incoming=_ref.incoming,theme=_ref.theme;return React.createElement(View,{style:{flexDirection:\"row\"}},!incoming&&React.createElement(View,{style:{flex:1}}),React.createElement(View,{style:{backgroundColor:incoming?\"white\":theme.colors.primary,borderTopLeftRadius:!incoming?10:0,borderTopRightRadius:10,borderBottomLeftRadius:10,borderBottomRightRadius:incoming?10:0,maxWidth:\"80%\",paddingHorizontal:8,paddingVertical:8,marginBottom:8,marginHorizontal:8}},React.createElement(Text,{style:{color:!incoming?\"white\":\"black\",textAlign:incoming?\"left\":\"right\"}},message.text)),incoming&&React.createElement(View,{style:{flex:1}}));};var RoomScreen=function RoomScreen(_ref2){var chat=_ref2.chat,sendMessage=_ref2.sendMessage,route=_ref2.route,auth=_ref2.auth,fetchConversation=_ref2.fetchConversation;var conversation_id=route.params.conversation._id;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),newMessage=_useState2[0],setNewMessage=_useState2[1];var _useContext=useContext(ThemeContext),theme=_useContext.theme;var conversation=chat.conversations.filter(function(conv){return conv._id===conversation_id;})[0];useEffect(function(){function fetchData(){fetchConversation(conversation_id);}fetchData();},[]);var onSendMessage=function onSendMessage(){if(!newMessage){return;}sendMessage({text:newMessage,conversation_id:conversation_id});setNewMessage(\"\");};return React.createElement(View,{style:{flex:1,justifyContent:\"space-between\"}},React.createElement(FlatList,{data:conversation.messages,renderItem:function renderItem(_ref3){var item=_ref3.item;return React.createElement(Message,{message:item,incoming:(item==null?void 0:item.sender)!==auth.user._id,theme:theme});},keyExtractor:function keyExtractor(item){return item==null?void 0:item._id;},inverted:true}),React.createElement(View,{style:{flexDirection:\"row\",backgroundColor:\"white\",paddingVertical:8,paddingHorizontal:16,alignItems:\"center\",justifyContent:\"center\",alignContent:\"center\"}},React.createElement(TextInput,{style:{height:40,flex:1},onChangeText:function onChangeText(text){return setNewMessage(text);},value:newMessage,multiline:true,placeholder:\"Ecrivez votre message ici.\"}),React.createElement(Button,{icon:React.createElement(Icon,{name:\"send\",size:20,color:newMessage?theme.colors.primary:theme.colors.grey2}),disabled:!newMessage,type:\"clear\",onPress:function onPress(){return onSendMessage();}})));};var mapStateToProps=function mapStateToProps(state){return{chat:state.chat,auth:state.auth};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{sendMessage:function sendMessage(message){return dispatch(_sendMessage(message));},fetchConversation:function fetchConversation(conversation_id){return dispatch(_fetchConversation(conversation_id));}};};export default connect(mapStateToProps,mapDispatchToProps)(RoomScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/Messages/MessagesRoomScreen.js"],"names":["React","useContext","useState","useEffect","connect","ThemeContext","Button","Icon","sendMessage","fetchConversation","_","Message","message","incoming","theme","flexDirection","flex","backgroundColor","colors","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","maxWidth","paddingHorizontal","paddingVertical","marginBottom","marginHorizontal","color","textAlign","text","RoomScreen","chat","route","auth","conversation_id","params","conversation","_id","newMessage","setNewMessage","conversations","filter","conv","fetchData","onSendMessage","justifyContent","messages","item","sender","user","alignItems","alignContent","height","grey2","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,QAA5B,CAAsCC,SAAtC,KAAuD,OAAvD,C,sOAEA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,YAAT,CAAuBC,MAAvB,CAA+BC,IAA/B,KAA2C,uBAA3C,CACA,OAASC,WAAW,GAAXA,CAAAA,YAAT,CAAsBC,iBAAiB,GAAjBA,CAAAA,kBAAtB,iCACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAkC,IAA/BC,CAAAA,OAA+B,MAA/BA,OAA+B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAZC,KAAY,MAAZA,KAAY,CAChD,MACE,qBAAC,IAAD,EACE,KAAK,CAAE,CACLC,aAAa,CAAE,KADV,CADT,EAKG,CAACF,QAAD,EAAa,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEG,IAAI,CAAE,CAAR,CAAb,EALhB,CAME,oBAAC,IAAD,EACE,KAAK,CAAE,CACLC,eAAe,CAAEJ,QAAQ,CAAG,OAAH,CAAaC,KAAK,CAACI,MAAN,CAAaC,OAD9C,CAELC,mBAAmB,CAAE,CAACP,QAAD,CAAY,EAAZ,CAAiB,CAFjC,CAGLQ,oBAAoB,CAAE,EAHjB,CAILC,sBAAsB,CAAE,EAJnB,CAKLC,uBAAuB,CAAEV,QAAQ,CAAG,EAAH,CAAQ,CALpC,CAMLW,QAAQ,CAAE,KANL,CAOLC,iBAAiB,CAAE,CAPd,CAQLC,eAAe,CAAE,CARZ,CASLC,YAAY,CAAE,CATT,CAULC,gBAAgB,CAAE,CAVb,CADT,EAcE,oBAAC,IAAD,EACE,KAAK,CAAE,CACLC,KAAK,CAAE,CAAChB,QAAD,CAAY,OAAZ,CAAsB,OADxB,CAELiB,SAAS,CAAEjB,QAAQ,CAAG,MAAH,CAAY,OAF1B,CADT,EAMGD,OAAO,CAACmB,IANX,CAdF,CANF,CA6BGlB,QAAQ,EAAI,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEG,IAAI,CAAE,CAAR,CAAb,EA7Bf,CADF,CAiCD,CAlCD,CAoCA,GAAMgB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,OAA2D,IAAxDC,CAAAA,IAAwD,OAAxDA,IAAwD,CAAlDzB,WAAkD,OAAlDA,WAAkD,CAArC0B,KAAqC,OAArCA,KAAqC,CAA9BC,IAA8B,OAA9BA,IAA8B,CAAxB1B,iBAAwB,OAAxBA,iBAAwB,CAC5E,GAAM2B,CAAAA,eAAe,CAAGF,KAAK,CAACG,MAAN,CAAaC,YAAb,CAA0BC,GAAlD,CAD4E,cAExCrC,QAAQ,CAAC,EAAD,CAFgC,wCAErEsC,UAFqE,eAEzDC,aAFyD,+BAG1DxC,UAAU,CAACI,YAAD,CAHgD,CAGpES,KAHoE,aAGpEA,KAHoE,CAI5E,GAAMwB,CAAAA,YAAY,CAAGL,IAAI,CAACS,aAAL,CAAmBC,MAAnB,CACnB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACL,GAAL,GAAaH,eAAvB,EADmB,EAEnB,CAFmB,CAArB,CAIAjC,SAAS,CAAC,UAAM,CACd,QAAS0C,CAAAA,SAAT,EAAqB,CACnBpC,iBAAiB,CAAC2B,eAAD,CAAjB,CACD,CACDS,SAAS,GACV,CALQ,CAKN,EALM,CAAT,CAOA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAI,CAACN,UAAL,CAAiB,CACf,OACD,CACDhC,WAAW,CAAC,CACVuB,IAAI,CAAES,UADI,CAEVJ,eAAe,CAAfA,eAFU,CAAD,CAAX,CAIAK,aAAa,CAAC,EAAD,CAAb,CACD,CATD,CAWA,MACE,qBAAC,IAAD,EAAM,KAAK,CAAE,CAAEzB,IAAI,CAAE,CAAR,CAAW+B,cAAc,CAAE,eAA3B,CAAb,EACE,oBAAC,QAAD,EACE,IAAI,CAAET,YAAY,CAACU,QADrB,CAEE,UAAU,CAAE,8BAAGC,CAAAA,IAAH,OAAGA,IAAH,OACV,qBAAC,OAAD,EACE,OAAO,CAAEA,IADX,CAEE,QAAQ,CAAE,CAAAA,IAAI,MAAJ,QAAAA,IAAI,CAAEC,MAAN,IAAiBf,IAAI,CAACgB,IAAL,CAAUZ,GAFvC,CAGE,KAAK,CAAEzB,KAHT,EADU,EAFd,CASE,YAAY,CAAE,sBAACmC,IAAD,QAAUA,CAAAA,IAAV,cAAUA,IAAI,CAAEV,GAAhB,EAThB,CAUE,QAAQ,CAAE,IAVZ,EADF,CAaE,oBAAC,IAAD,EACE,KAAK,CAAE,CACLxB,aAAa,CAAE,KADV,CAELE,eAAe,CAAE,OAFZ,CAGLS,eAAe,CAAE,CAHZ,CAILD,iBAAiB,CAAE,EAJd,CAKL2B,UAAU,CAAE,QALP,CAMLL,cAAc,CAAE,QANX,CAOLM,YAAY,CAAE,QAPT,CADT,EAWE,oBAAC,SAAD,EACE,KAAK,CAAE,CACLC,MAAM,CAAE,EADH,CAELtC,IAAI,CAAE,CAFD,CADT,CAKE,YAAY,CAAE,sBAACe,IAAD,QAAUU,CAAAA,aAAa,CAACV,IAAD,CAAvB,EALhB,CAME,KAAK,CAAES,UANT,CAOE,SAAS,KAPX,CAQE,WAAW,CAAC,4BARd,EAXF,CAqBE,oBAAC,MAAD,EACE,IAAI,CACF,oBAAC,IAAD,EACE,IAAI,CAAC,MADP,CAEE,IAAI,CAAE,EAFR,CAGE,KAAK,CAAEA,UAAU,CAAG1B,KAAK,CAACI,MAAN,CAAaC,OAAhB,CAA0BL,KAAK,CAACI,MAAN,CAAaqC,KAH1D,EAFJ,CAQE,QAAQ,CAAE,CAACf,UARb,CASE,IAAI,CAAC,OATP,CAUE,OAAO,CAAE,yBAAMM,CAAAA,aAAa,EAAnB,EAVX,EArBF,CAbF,CADF,CAkDD,CA5ED,CA8EA,GAAMU,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CACjC,MAAO,CACLxB,IAAI,CAAEwB,KAAK,CAACxB,IADP,CAELE,IAAI,CAAEsB,KAAK,CAACtB,IAFP,CAAP,CAID,CALD,CAOA,GAAMuB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAc,CACvC,MAAO,CACLnD,WAAW,CAAE,qBAACI,OAAD,QAAa+C,CAAAA,QAAQ,CAACnD,YAAW,CAACI,OAAD,CAAZ,CAArB,EADR,CAELH,iBAAiB,CAAE,2BAAC2B,eAAD,QACjBuB,CAAAA,QAAQ,CAAClD,kBAAiB,CAAC2B,eAAD,CAAlB,CADS,EAFd,CAAP,CAKD,CAND,CAQA,cAAehC,CAAAA,OAAO,CAACoD,eAAD,CAAkBE,kBAAlB,CAAP,CAA6C1B,UAA7C,CAAf","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { View, Text, TextInput, FlatList } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport { sendMessage, fetchConversation } from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nconst Message = ({ message, incoming, theme }) => {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n      }}\n    >\n      {!incoming && <View style={{ flex: 1 }}></View>}\n      <View\n        style={{\n          backgroundColor: incoming ? \"white\" : theme.colors.primary,\n          borderTopLeftRadius: !incoming ? 10 : 0,\n          borderTopRightRadius: 10,\n          borderBottomLeftRadius: 10,\n          borderBottomRightRadius: incoming ? 10 : 0,\n          maxWidth: \"80%\",\n          paddingHorizontal: 8,\n          paddingVertical: 8,\n          marginBottom: 8,\n          marginHorizontal: 8,\n        }}\n      >\n        <Text\n          style={{\n            color: !incoming ? \"white\" : \"black\",\n            textAlign: incoming ? \"left\" : \"right\",\n          }}\n        >\n          {message.text}\n        </Text>\n      </View>\n      {incoming && <View style={{ flex: 1 }}></View>}\n    </View>\n  );\n};\n\nconst RoomScreen = ({ chat, sendMessage, route, auth, fetchConversation }) => {\n  const conversation_id = route.params.conversation._id;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { theme } = useContext(ThemeContext);\n  const conversation = chat.conversations.filter(\n    (conv) => conv._id === conversation_id\n  )[0];\n\n  useEffect(() => {\n    function fetchData() {\n      fetchConversation(conversation_id);\n    }\n    fetchData();\n  }, []);\n\n  const onSendMessage = () => {\n    if (!newMessage) {\n      return;\n    }\n    sendMessage({\n      text: newMessage,\n      conversation_id,\n    });\n    setNewMessage(\"\");\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n      <FlatList\n        data={conversation.messages}\n        renderItem={({ item }) => (\n          <Message\n            message={item}\n            incoming={item?.sender !== auth.user._id}\n            theme={theme}\n          />\n        )}\n        keyExtractor={(item) => item?._id}\n        inverted={true}\n      />\n      <View\n        style={{\n          flexDirection: \"row\",\n          backgroundColor: \"white\",\n          paddingVertical: 8,\n          paddingHorizontal: 16,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n        }}\n      >\n        <TextInput\n          style={{\n            height: 40,\n            flex: 1,\n          }}\n          onChangeText={(text) => setNewMessage(text)}\n          value={newMessage}\n          multiline\n          placeholder=\"Ecrivez votre message ici.\"\n        />\n        <Button\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={newMessage ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!newMessage}\n          type=\"clear\"\n          onPress={() => onSendMessage()}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    chat: state.chat,\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (message) => dispatch(sendMessage(message)),\n    fetchConversation: (conversation_id) =>\n      dispatch(fetchConversation(conversation_id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomScreen);\n"]},"metadata":{},"sourceType":"module"}