{"ast":null,"code":"import{createStore,applyMiddleware,compose}from\"redux\";import thunk from\"redux-thunk\";import rootReducer from\"./reducers/index\";import Platform from\"react-native-web/dist/exports/Platform\";import{socketMiddleware,axiosMiddleware,devMiddleware}from\"./reduxMiddlewares\";import AsyncStorage from\"react-native-web/dist/exports/AsyncStorage\";import logger from\"redux-logger\";import{persistStore,persistReducer}from\"redux-persist\";var persistConfig={key:\"root\",storage:AsyncStorage,blacklist:[\"overlay\"]};var persistedReducer=persistReducer(persistConfig,rootReducer);var middlewares=[thunk,devMiddleware,axiosMiddleware,socketMiddleware()];if(Platform.OS===\"web\"){middlewares.push(logger);}var store=createStore(persistedReducer,applyMiddleware.apply(void 0,middlewares));var persistor=persistStore(store);export{store,persistor};","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/index.js"],"names":["createStore","applyMiddleware","compose","thunk","rootReducer","socketMiddleware","axiosMiddleware","devMiddleware","logger","persistStore","persistReducer","persistConfig","key","storage","AsyncStorage","blacklist","persistedReducer","middlewares","Platform","OS","push","store","persistor"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,OAAvC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,WAAP,wB,6DAEA,OACEC,gBADF,CAEEC,eAFF,CAGEC,aAHF,0B,qEAMA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CAEA,OAASC,YAAT,CAAuBC,cAAvB,KAA6C,eAA7C,CAEA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,GAAG,CAAE,MADe,CAEpBC,OAAO,CAAEC,YAFW,CAGpBC,SAAS,CAAE,CAAC,SAAD,CAHS,CAAtB,CAMA,GAAMC,CAAAA,gBAAgB,CAAGN,cAAc,CAACC,aAAD,CAAgBP,WAAhB,CAAvC,CACA,GAAMa,CAAAA,WAAW,CAAG,CAACd,KAAD,CAAQI,aAAR,CAAuBD,eAAvB,CAAwCD,gBAAgB,EAAxD,CAApB,CAEA,GAAIa,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CACzBF,WAAW,CAACG,IAAZ,CAAiBZ,MAAjB,EACD,CAED,GAAMa,CAAAA,KAAK,CAAGrB,WAAW,CAACgB,gBAAD,CAAmBf,eAAe,MAAf,QAAmBgB,WAAnB,CAAnB,CAAzB,CAEA,GAAIK,CAAAA,SAAS,CAAGb,YAAY,CAACY,KAAD,CAA5B,CAEA,OAASA,KAAT,CAAgBC,SAAhB","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/index\";\nimport { Platform } from \"react-native\";\nimport {\n  socketMiddleware,\n  axiosMiddleware,\n  devMiddleware,\n} from \"./reduxMiddlewares\";\nimport { AsyncStorage } from \"react-native\";\nimport logger from \"redux-logger\";\n\nimport { persistStore, persistReducer } from \"redux-persist\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: AsyncStorage,\n  blacklist: [\"overlay\"],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst middlewares = [thunk, devMiddleware, axiosMiddleware, socketMiddleware()];\n\nif (Platform.OS === \"web\") {\n  middlewares.push(logger);\n}\n\nconst store = createStore(persistedReducer, applyMiddleware(...middlewares));\n\nlet persistor = persistStore(store);\n\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}