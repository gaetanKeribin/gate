{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nimport _ from \"lodash\";\n\nvar returnUpdatedArray = function returnUpdatedArray(array, search, updatedItem) {\n  var updatedArray = [];\n\n  var index = _.findIndex(state.conversations, search);\n\n  if (index > 0) updatedArray.concat(array.slice(0, index));\n  updatedArray.concat(updatedItem);\n  updatedArray.concat(index + 1);\n  return updatedArray;\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var i = _.findIndex(state.conversations, {\n    _id: action.data.conversation_id\n  });\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: returnUpdatedArray(state.conversations, i, action.data.conversation),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"RECEIVE_READ_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: [].concat(_toConsumableArray(state.conversations.slice(0, i)), [_objectSpread({}, state.conversations[i], {\n          read: {\n            user_id: action.data.user_id,\n            sentAt: action.data.sentAt\n          }\n        })], _toConsumableArray(state.conversations.slice(i))),\n        isLoaded: true\n      });\n\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: [_objectSpread({}, state.conversations[i], {\n          writing: action.wrintingData\n        })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n          return conv._id !== action.message.conversation_id;\n        }))),\n        isLoaded: true\n      });\n\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [returnUpdatedArray(state.conversations, i, _objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: returnUpdatedArray(state.conversations[i].messages, action.message)\n          }))],\n          isLoaded: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [_objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: [action.message]\n          })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n            return conv._id !== action.message.conversation_id;\n          }))),\n          isLoaded: true\n        });\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","returnUpdatedArray","array","search","updatedItem","updatedArray","index","findIndex","state","concat","slice","action","i","_id","data","conversation_id","type","receivedAt","conversation","read","user_id","sentAt","writing","wrintingData","filter","conv","message","messages","lastMessage"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\n// {\n//   data: {conversation_id: \"\"},\n//   type: \"RECEIVE_READ_ACK\"\n// }\n\nconst returnUpdatedArray = (array, search, updatedItem) => {\n  let updatedArray = [];\n  let index = _.findIndex(state.conversations, search);\n\n  if (index > 0) updatedArray.concat(array.slice(0, index));\n  updatedArray.concat(updatedItem);\n  updatedArray.concat(index + 1);\n\n  return updatedArray;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations, {\n    _id: action.data.conversation_id,\n  });\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: returnUpdatedArray(\n          state.conversations,\n          i,\n          action.data.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: [\n          ...state.conversations.slice(0, i),\n          {\n            ...state.conversations[i],\n            read: { user_id: action.data.user_id, sentAt: action.data.sentAt },\n          },\n          ...state.conversations.slice(i),\n        ],\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: [\n          {\n            ...state.conversations[i],\n            writing: action.wrintingData,\n          },\n          ...state.conversations.filter(\n            (conv) => conv._id !== action.message.conversation_id\n          ),\n        ],\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            returnUpdatedArray(state.conversations, i, {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: returnUpdatedArray(\n                state.conversations[i].messages,\n                action.message\n              ),\n            }),\n          ],\n          isLoaded: true,\n        };\n      } else {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}