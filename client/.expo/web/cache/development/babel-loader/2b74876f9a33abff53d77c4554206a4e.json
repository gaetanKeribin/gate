{"ast":null,"code":"import * as FileSystem from \"expo-file-system\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var fetchFile = function fetchFile(bucketName, fileId) {\n  return {\n    type: \"REQUEST_FILE\",\n    route: \"files/\" + bucketName + \"/\" + fileId,\n    method: \"GET\"\n  };\n};\nexport var deleteFile = function deleteFile(bucketName, fileId) {\n  return {\n    type: \"REQUEST_DELETE_FILE\",\n    route: \"files/\" + bucketName + \"/\" + fileId,\n    method: \"DELETE\",\n    successNotification: {\n      message: \"Votre document a bien été supprimé de la base de données.\",\n      variant: \"success\",\n      timeout: 2000\n    },\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000\n    }\n  };\n};\n\nfunction dataURItoBlob(dataURI) {\n  console.log(dataURI);\n  var byteString = atob(dataURI.split(\",\")[1]);\n  console.log(byteString);\n  var mimeString = dataURI.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n  var ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  var blob = new Blob([ab], {\n    type: mimeString\n  });\n  return blob;\n}\n\nexport var uploadFile = function uploadFile(file, bucketName, name) {\n  var formData = new FormData();\n\n  if (Platform.OS = \"web\") {\n    var blob = dataURItoBlob(file.uri);\n    formData.append(\"file\", blob);\n  } else {\n    formData.append(\"file\", new File(file, name));\n  }\n\n  name && formData.append(\"name\", name);\n  return {\n    type: \"REQUEST_UPLOAD_FILE\",\n    route: \"files/\" + bucketName,\n    payload: formData,\n    method: \"POST\",\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000\n    }\n  };\n};","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/actions/filesActions.js"],"names":["FileSystem","fetchFile","bucketName","fileId","type","route","method","deleteFile","successNotification","message","variant","timeout","errorNotification","dataURItoBlob","dataURI","console","log","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","blob","Blob","uploadFile","file","name","formData","FormData","Platform","OS","uri","append","File","payload"],"mappings":"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","sourcesContent":["import * as FileSystem from \"expo-file-system\";\nimport { Platform } from \"react-native\";\n\nexport const fetchFile = (bucketName, fileId) => {\n  return {\n    type: \"REQUEST_FILE\",\n    route: `files/${bucketName}/${fileId}`,\n    method: \"GET\",\n  };\n};\n\nexport const deleteFile = (bucketName, fileId) => {\n  return {\n    type: \"REQUEST_DELETE_FILE\",\n    route: `files/${bucketName}/${fileId}`,\n    method: \"DELETE\",\n    successNotification: {\n      message: \"Votre document a bien été supprimé de la base de données.\",\n      variant: \"success\",\n      timeout: 2000,\n    },\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000,\n    },\n  };\n};\n\nfunction dataURItoBlob(dataURI) {\n  console.log(dataURI);\n\n  // convert base64 to raw binary data held in a string\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n  var byteString = atob(dataURI.split(\",\")[1]);\n  console.log(byteString);\n\n  // separate out the mime component\n  var mimeString = dataURI.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  var ab = new ArrayBuffer(byteString.length);\n\n  // create a view into the buffer\n  var ia = new Uint8Array(ab);\n\n  // set the bytes of the buffer to the correct values\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  // write the ArrayBuffer to a blob, and you're done\n  var blob = new Blob([ab], { type: mimeString });\n  return blob;\n}\n\nexport const uploadFile = (file, bucketName, name) => {\n  let formData = new FormData();\n\n  if ((Platform.OS = \"web\")) {\n    let blob = dataURItoBlob(file.uri);\n    formData.append(\"file\", blob);\n  } else {\n    formData.append(\"file\", new File(file, name));\n    //  formData.append(\"file\", FileSystem.readAsStringAsync(file.uri));\n  }\n\n  name && formData.append(\"name\", name);\n  // formData.append(\"file\", fs.createReadStream(file.uri));\n\n  return {\n    type: \"REQUEST_UPLOAD_FILE\",\n    route: `files/${bucketName}`,\n    payload: formData,\n    method: \"POST\",\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}