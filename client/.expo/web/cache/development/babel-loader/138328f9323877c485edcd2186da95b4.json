{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nimport _ from \"lodash\";\n\nvar copyAndUpdate = function copyAndUpdate(array, i, update) {\n  var copy = [];\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat(_objectSpread({}, array[index], {}, update));\n  copy.concat(index + 1);\n  return copy;\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: copyAndUpdate(state.conversations, i, action.data.conversation),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"RECEIVE_READ_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, action.data.lastMessage),\n        isLoaded: true\n      });\n\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }, action.data.writing),\n        isLoaded: true\n      });\n\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          lastMessage: action.message,\n          messages: Array.isArray(state.conversations[i].messages) ? [action.message].concat(_toConsumableArray(state.conversations[i].messages)) : [action.message]\n        }),\n        isLoaded: true\n      });\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","copyAndUpdate","array","i","update","copy","concat","slice","index","state","action","findIndex","type","receivedAt","data","conversation","lastMessage","_id","conversation_id","writing","message","messages","Array","isArray"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\n// {\n//   data: {conversation_id: \"\"},\n//   type: \"RECEIVE_READ_ACK\"\n// }\n\nconst copyAndUpdate = (array, i, update) => {\n  let copy = [];\n\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat({ ...array[index], ...update });\n  copy.concat(index + 1);\n\n  return copy;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: copyAndUpdate(\n          state.conversations,\n          i,\n          action.data.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(\n          state.conversations,\n          i,\n          action.data.lastMessage\n        ),\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(\n          state.conversations,\n          { _id: action.data.conversation_id },\n          action.data.writing\n        ),\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          lastMessage: action.message,\n          messages: Array.isArray(state.conversations[i].messages)\n            ? [action.message, ...state.conversations[i].messages]\n            : [action.message],\n        }),\n        isLoaded: true,\n      };\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}