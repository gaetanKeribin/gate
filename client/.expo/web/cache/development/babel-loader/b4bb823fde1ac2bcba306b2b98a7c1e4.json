{"ast":null,"code":"import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Avatar, Divider, Icon, Button } from \"react-native-elements\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport theme from \"../../Theme.json\";\nimport _ from \"lodash\";\nimport { showOverlay } from \"../../actions/overlayAction\";\nimport { sendMessage, fetchConversations } from \"../../actions/chatActions\";\n\nvar PeopleScreen = function PeopleScreen(_ref) {\n  var _item$avatar;\n\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      chat = _useSelector.chat;\n\n  var dispatch = useDispatch();\n  var item = route.params.item;\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignContent: \"space-between\",\n      paddingVertical: 10,\n      paddingHorizontal: 8,\n      backgroundColor: \"white\"\n    }\n  }, React.createElement(ScrollView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(LinearGradient, {\n    colors: [theme.colors.primary, theme.colors.secondary],\n    start: [0.25, 1],\n    end: [0, 0],\n    style: {\n      flexDirection: \"row\",\n      marginBottom: 20,\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      borderRadius: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignContent: \"center\",\n      justifyContent: \"center\"\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      color: theme.colors.grey5\n    }\n  }, _.capitalize(item == null ? void 0 : item.firstname)), React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      color: \"white\",\n      fontWeight: \"bold\"\n    }\n  }, _.capitalize(item == null ? void 0 : item.lastname))), (item == null ? void 0 : item.avatar) ? React.createElement(Avatar, {\n    size: \"xlarge\",\n    containerStyle: {\n      borderColor: \"white\",\n      borderWidth: 3\n    },\n    source: {\n      uri: \"https://siee-gate.herokuapp.com/api/files/avatar/\" + (item == null ? void 0 : (_item$avatar = item.avatar) == null ? void 0 : _item$avatar.filename)\n    }\n  }) : React.createElement(Avatar, {\n    size: \"xlarge\",\n    containerStyle: {\n      borderColor: \"white\",\n      borderWidth: 3\n    },\n    title: item == null ? void 0 : item.firstname.charAt(0).concat(item == null ? void 0 : item.lastname.charAt(0)).toUpperCase()\n  })), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    }\n  }, React.createElement(Icon, {\n    name: \"briefcase\",\n    size: 20,\n    color: \"grey\"\n  }), React.createElement(Text, {\n    style: {\n      textAlignVertical: \"bottom\",\n      marginHorizontal: 8,\n      flex: 1\n    }\n  }, item == null ? void 0 : item.jobTitle, \" chez \", item == null ? void 0 : item.organisation)), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    }\n  }, React.createElement(Icon, {\n    name: \"school\",\n    size: 20,\n    color: \"grey\"\n  }), React.createElement(Text, {\n    style: {\n      textAlignVertical: \"bottom\",\n      marginHorizontal: 8,\n      flex: 1\n    }\n  }, \"Promotion \", item == null ? void 0 : item.promo)), React.createElement(Divider, {\n    style: {\n      marginVertical: 20,\n      backgroundColor: \"grey\",\n      borderWidth: 1,\n      width: 20\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\"\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: \"justify\",\n      flex: 1,\n      marginEnd: 8\n    }\n  }, item == null ? void 0 : item.description)), React.createElement(Divider, {\n    style: {\n      marginVertical: 20,\n      backgroundColor: \"grey\",\n      borderWidth: 1,\n      width: 20\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\"\n    }\n  }, React.createElement(Icon, {\n    name: \"at\",\n    size: 20,\n    color: \"grey\"\n  }), React.createElement(Text, {\n    style: {\n      textAlignVertical: \"bottom\",\n      marginStart: 8,\n      flex: 1\n    }\n  }, item == null ? void 0 : item.email))), React.createElement(Button, {\n    title: \"Contacter\",\n    onPress: function onPress() {\n      return chat.interlocutorsIds.includes(item == null ? void 0 : item._id) ? function () {\n        return navigation.navigate(\"Room\", {\n          title: fullName,\n          conversation: chat.convIdsWithPartsIds.filter(function (element) {\n            return element.participants.includes(item == null ? void 0 : item._id) === true;\n          }).filter(function (conv) {\n            return conv.participants.length === 2;\n          })[0]\n        });\n      } : dispatch(showOverlay({\n        form: {\n          action: sendMessage,\n          inputName: \"text\",\n          actionParams: {\n            recipients: [item == null ? void 0 : item._id]\n          },\n          message: \"Demarrer une conversation avec \" + _.capitalize(item == null ? void 0 : item.firstname) + \" \" + _.capitalize(item == null ? void 0 : item.lastname)\n        },\n        redirect: \"Messages\",\n        dispatchCallback: fetchConversations\n      }));\n    }\n  })));\n};\n\nexport default PeopleScreen;","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/People/PeopleReadScreen.js"],"names":["React","useDispatch","useSelector","Avatar","Divider","Icon","Button","LinearGradient","theme","_","showOverlay","sendMessage","fetchConversations","PeopleScreen","route","navigation","state","chat","dispatch","item","params","flex","alignContent","paddingVertical","paddingHorizontal","backgroundColor","colors","primary","secondary","flexDirection","marginBottom","borderRadius","justifyContent","fontSize","color","grey5","capitalize","firstname","fontWeight","lastname","avatar","borderColor","borderWidth","uri","filename","charAt","concat","toUpperCase","alignItems","textAlignVertical","marginHorizontal","jobTitle","organisation","promo","marginVertical","width","textAlign","marginEnd","description","marginStart","email","interlocutorsIds","includes","_id","navigate","title","fullName","conversation","convIdsWithPartsIds","filter","element","participants","conv","length","form","action","inputName","actionParams","recipients","message","redirect","dispatchCallback"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { View, Text, ScrollView } from \"react-native\";\nimport { Avatar, Divider, Icon, Button } from \"react-native-elements\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport theme from \"../../Theme.json\";\nimport _ from \"lodash\";\nimport { showOverlay } from \"../../actions/overlayAction\";\nimport { sendMessage, fetchConversations } from \"../../actions/chatActions\";\n\nconst PeopleScreen = ({ route, navigation }) => {\n  const { chat } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { item } = route.params;\n\n  return (\n    <View\n      style={{\n        flex: 1,\n      }}\n    >\n      <View\n        style={{\n          flex: 1,\n          alignContent: \"space-between\",\n          paddingVertical: 10,\n          paddingHorizontal: 8,\n          backgroundColor: \"white\",\n        }}\n      >\n        <ScrollView\n          style={{\n            flex: 1,\n          }}\n        >\n          <LinearGradient\n            colors={[theme.colors.primary, theme.colors.secondary]}\n            start={[0.25, 1]}\n            end={[0, 0]}\n            style={{\n              flexDirection: \"row\",\n              marginBottom: 20,\n              paddingVertical: 8,\n              paddingHorizontal: 16,\n              borderRadius: 5,\n            }}\n          >\n            <View\n              style={{\n                flex: 1,\n                alignContent: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Text style={{ fontSize: 20, color: theme.colors.grey5 }}>\n                {_.capitalize(item?.firstname)}\n              </Text>\n              <Text\n                style={{ fontSize: 30, color: \"white\", fontWeight: \"bold\" }}\n              >\n                {_.capitalize(item?.lastname)}\n              </Text>\n            </View>\n            {item?.avatar ? (\n              <Avatar\n                size=\"xlarge\"\n                containerStyle={{\n                  borderColor: \"white\",\n                  borderWidth: 3,\n                }}\n                source={{\n                  uri: `https://siee-gate.herokuapp.com/api/files/avatar/${item?.avatar?.filename}`,\n                }}\n              />\n            ) : (\n              <Avatar\n                size=\"xlarge\"\n                containerStyle={{\n                  borderColor: \"white\",\n                  borderWidth: 3,\n                }}\n                title={item?.firstname\n                  .charAt(0)\n                  .concat(item?.lastname.charAt(0))\n                  .toUpperCase()}\n              />\n            )}\n          </LinearGradient>\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            <Icon name=\"briefcase\" size={20} color=\"grey\" />\n            <Text\n              style={{\n                textAlignVertical: \"bottom\",\n                marginHorizontal: 8,\n                flex: 1,\n              }}\n            >\n              {item?.jobTitle} chez {item?.organisation}\n            </Text>\n          </View>\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Icon name=\"school\" size={20} color=\"grey\" />\n            <Text\n              style={{\n                textAlignVertical: \"bottom\",\n                marginHorizontal: 8,\n                flex: 1,\n              }}\n            >\n              Promotion {item?.promo}\n            </Text>\n          </View>\n          <Divider\n            style={{\n              marginVertical: 20,\n              backgroundColor: \"grey\",\n              borderWidth: 1,\n              width: 20,\n            }}\n          />\n          <View style={{ flexDirection: \"row\" }}>\n            <Text style={{ textAlign: \"justify\", flex: 1, marginEnd: 8 }}>\n              {item?.description}\n            </Text>\n          </View>\n          <Divider\n            style={{\n              marginVertical: 20,\n              backgroundColor: \"grey\",\n              borderWidth: 1,\n              width: 20,\n            }}\n          />\n          <View style={{ flexDirection: \"row\" }}>\n            <Icon name=\"at\" size={20} color=\"grey\" />\n            <Text\n              style={{ textAlignVertical: \"bottom\", marginStart: 8, flex: 1 }}\n            >\n              {item?.email}\n            </Text>\n          </View>\n        </ScrollView>\n        <Button\n          title=\"Contacter\"\n          onPress={() =>\n            chat.interlocutorsIds.includes(item?._id)\n              ? () =>\n                  navigation.navigate(\"Room\", {\n                    title: fullName,\n                    conversation: chat.convIdsWithPartsIds\n                      .filter(\n                        (element) =>\n                          element.participants.includes(item?._id) === true\n                      )\n                      .filter((conv) => conv.participants.length === 2)[0],\n                  })\n              : dispatch(\n                  showOverlay({\n                    form: {\n                      action: sendMessage,\n                      inputName: \"text\",\n                      actionParams: { recipients: [item?._id] },\n                      message:\n                        \"Demarrer une conversation avec \" +\n                        _.capitalize(item?.firstname) +\n                        \" \" +\n                        _.capitalize(item?.lastname),\n                    },\n                    redirect: \"Messages\",\n                    dispatchCallback: fetchConversations,\n                  })\n                )\n          }\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default PeopleScreen;\n"]},"metadata":{},"sourceType":"module"}