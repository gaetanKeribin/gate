{"ast":null,"code":"var _jsxFileName = \"/home/gaetan/Documents/GATE/app/frontend/src/components/Notifier.js\";\nimport React, { useContext } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetNotification } from \"../actions/notifyActions\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar Notifier = function Notifier(_ref) {\n  var notification = _ref.notification,\n      reset = _ref.reset,\n      menu = _ref.menu;\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var dispatch = useDispatch();\n  notification.message && setTimeout(function () {\n    reset();\n    notification.redirect && RootNavigation.navigate(notification.redirect, {});\n    notification.dispatchCallback && dispatch({\n      type: notification.dispatchCallback\n    });\n  }, notification.timeout);\n\n  if (menu.show === true) {\n    return React.createElement(View, {\n      style: {\n        position: \"absolute\",\n        height: Dimensions.get(\"window\").height,\n        width: Dimensions.get(\"window\").width,\n        backgroundColor: theme.colors.grey6,\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }), React.createElement(View, {\n      style: {\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingHorizontal: 12,\n        paddingVertical: 8,\n        elevation: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, menu.buttons.map(function (button) {\n      return React.createElement(Button, {\n        title: button.title,\n        onPress: dispatch(button.dispatch()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      });\n    }), menu.input && React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        backgroundColor: \"white\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        marginTop: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }, React.createElement(TextInput, {\n      value: newMessage,\n      multiline: true,\n      placeholder: \"Ecrivez ici.\",\n      placeholderTextColor: \"grey\",\n      onChangeText: function onChangeText(text) {\n        return setNewMessage(text);\n      },\n      style: {\n        backgroundColor: theme.colors.grey5,\n        borderColor: theme.colors.grey4,\n        borderWidth: 1,\n        borderRadius: 5,\n        paddingVertical: 2,\n        paddingHorizontal: 4,\n        maxHeight: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), React.createElement(Button, {\n      containerStyle: {\n        height: 30\n      },\n      icon: React.createElement(Icon, {\n        name: \"send\",\n        size: 20,\n        color: newMessage ? theme.colors.primary : theme.colors.grey2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }),\n      disabled: !newMessage,\n      type: \"clear\",\n      onPress: function onPress() {\n        dispatch(menu.input.dispatch());\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    })), menu.message && React.createElement(Text, {\n      style: {\n        fontSize: 14\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, menu.message)), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  if (notification.show === true) {\n    return React.createElement(View, {\n      style: {\n        position: \"absolute\",\n        height: Dimensions.get(\"window\").height,\n        width: Dimensions.get(\"window\").width,\n        backgroundColor: theme.colors.grey6,\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }), React.createElement(View, {\n      style: {\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingHorizontal: 12,\n        paddingVertical: 8,\n        elevation: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, React.createElement(Icon, {\n      containerStyle: {\n        marginBottom: 8\n      },\n      size: 30,\n      name: notification.variant === \"success\" ? \"check-circle-outline\" : notification.variant === \"warning\" ? \"alert-circle-outline\" : notification.variant === \"error\" ? \"close-circle-outline\" : notification.icon,\n      color: notification.variant === \"success\" ? \"green\" : notification.variant === \"warning\" ? \"yellow\" : notification.variant === \"error\" ? \"red\" : notification.variant === \"error\" ? \"blue\" : theme.colors.grey1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }), notification.message && React.createElement(Text, {\n      style: {\n        fontSize: 14\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    }, notification.message)), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    })), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return null;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    notification: state.notification\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    reset: function reset() {\n      return dispatch(resetNotification());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifier);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/Notifier.js"],"names":["React","useContext","connect","useDispatch","Icon","ThemeContext","Button","resetNotification","RootNavigation","TouchableOpacity","Notifier","notification","reset","menu","theme","dispatch","message","setTimeout","redirect","navigate","dispatchCallback","type","timeout","show","position","height","Dimensions","get","width","backgroundColor","colors","grey6","alignContent","justifyContent","alignItems","flex","minHeight","flexDirection","minWidth","borderRadius","paddingHorizontal","paddingVertical","elevation","buttons","map","button","title","input","marginTop","newMessage","text","setNewMessage","grey5","borderColor","grey4","borderWidth","maxHeight","primary","grey2","fontSize","marginBottom","variant","icon","grey1","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Text, View, Dimensions } from \"react-native\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetNotification } from \"../actions/notifyActions\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nconst Notifier = ({ notification, reset, menu }) => {\n  const { theme } = useContext(ThemeContext);\n  const dispatch = useDispatch();\n  notification.message &&\n    setTimeout(() => {\n      reset();\n      notification.redirect &&\n        RootNavigation.navigate(notification.redirect, {});\n      notification.dispatchCallback &&\n        dispatch({ type: notification.dispatchCallback });\n    }, notification.timeout);\n\n  if (menu.show === true) {\n    return (\n      <View\n        style={{\n          position: \"absolute\",\n          height: Dimensions.get(\"window\").height,\n          width: Dimensions.get(\"window\").width,\n          backgroundColor: theme.colors.grey6,\n          alignContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"stretch\",\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n        <View\n          style={{\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n          <View\n            style={{\n              backgroundColor: \"white\",\n              borderRadius: 10,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingHorizontal: 12,\n              paddingVertical: 8,\n              elevation: 8,\n            }}\n          >\n            {menu.buttons.map((button) => {\n              return (\n                <Button\n                  title={button.title}\n                  onPress={dispatch(button.dispatch())}\n                />\n              );\n            })}\n            {menu.input && (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  backgroundColor: \"white\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  alignContent: \"center\",\n                  marginTop: 8,\n                }}\n              >\n                <TextInput\n                  value={newMessage}\n                  multiline\n                  placeholder=\"Ecrivez ici.\"\n                  placeholderTextColor=\"grey\"\n                  onChangeText={(text) => setNewMessage(text)}\n                  style={{\n                    backgroundColor: theme.colors.grey5,\n                    borderColor: theme.colors.grey4,\n                    borderWidth: 1,\n                    borderRadius: 5,\n                    paddingVertical: 2,\n                    paddingHorizontal: 4,\n                    maxHeight: 80,\n                  }}\n                />\n                <Button\n                  containerStyle={{ height: 30 }}\n                  icon={\n                    <Icon\n                      name=\"send\"\n                      size={20}\n                      color={\n                        newMessage ? theme.colors.primary : theme.colors.grey2\n                      }\n                    />\n                  }\n                  disabled={!newMessage}\n                  type=\"clear\"\n                  onPress={() => {\n                    dispatch(menu.input.dispatch());\n                  }}\n                />\n              </View>\n            )}\n            {menu.message && (\n              <Text style={{ fontSize: 14 }}>{menu.message}</Text>\n            )}\n          </View>\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n        </View>\n      </View>\n    );\n  }\n\n  if (notification.show === true) {\n    return (\n      <View\n        style={{\n          position: \"absolute\",\n          height: Dimensions.get(\"window\").height,\n          width: Dimensions.get(\"window\").width,\n          backgroundColor: theme.colors.grey6,\n          alignContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"stretch\",\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n        <View\n          style={{\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n          <View\n            style={{\n              backgroundColor: \"white\",\n              borderRadius: 10,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingHorizontal: 12,\n              paddingVertical: 8,\n              elevation: 8,\n            }}\n          >\n            <Icon\n              containerStyle={{ marginBottom: 8 }}\n              size={30}\n              name={\n                notification.variant === \"success\"\n                  ? \"check-circle-outline\"\n                  : notification.variant === \"warning\"\n                  ? \"alert-circle-outline\"\n                  : notification.variant === \"error\"\n                  ? \"close-circle-outline\"\n                  : notification.icon\n              }\n              color={\n                notification.variant === \"success\"\n                  ? \"green\"\n                  : notification.variant === \"warning\"\n                  ? \"yellow\"\n                  : notification.variant === \"error\"\n                  ? \"red\"\n                  : notification.variant === \"error\"\n                  ? \"blue\"\n                  : theme.colors.grey1\n              }\n            />\n            {notification.message && (\n              <Text style={{ fontSize: 14 }}>{notification.message}</Text>\n            )}\n          </View>\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n        </View>\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n      </View>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = (state) => ({\n  notification: state.notification,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    reset: () => dispatch(resetNotification()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifier);\n"]},"metadata":{},"sourceType":"module"}