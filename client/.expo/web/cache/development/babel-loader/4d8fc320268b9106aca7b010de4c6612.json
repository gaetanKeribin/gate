{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nimport _ from \"lodash\";\n\nvar copyAndUpdate = function copyAndUpdate(_ref) {\n  var array = _ref.array,\n      search = _ref.search,\n      update = _ref.update,\n      i = _ref.i;\n  var copy = [];\n  if (search) i = _.findIndex(state.conversations, search);\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat(_objectSpread({}, array[index], {}, update));\n  copy.concat(index + 1);\n  return copy;\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }, action.data.conversation),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"RECEIVE_READ_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }, action.data.lastMessage),\n        isLoaded: true\n      });\n\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }, action.data.writing),\n        isLoaded: true\n      });\n\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: copyAndUpdate(state.conversations, {\n            _id: action.data.conversation_id\n          }, {\n            lastMessage: action.message\n          }),\n          isLoaded: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [_objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: [action.message]\n          })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n            return conv._id !== action.message.conversation_id;\n          }))),\n          isLoaded: true\n        });\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","copyAndUpdate","array","search","update","i","copy","findIndex","state","concat","slice","index","action","type","receivedAt","data","_id","conversation_id","conversation","lastMessage","writing","messages","message","filter","conv"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\n// {\n//   data: {conversation_id: \"\"},\n//   type: \"RECEIVE_READ_ACK\"\n// }\n\nconst copyAndUpdate = ({ array, search, update, i }) => {\n  let copy = [];\n\n  if (search) i = _.findIndex(state.conversations, search); // {_id:\"\"}\n\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat({ ...array[index], ...update });\n  copy.concat(index + 1);\n\n  return copy;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: copyAndUpdate(\n          state.conversations,\n          { _id: action.data.conversation_id },\n          action.data.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(\n          state.conversations,\n          { _id: action.data.conversation_id },\n          action.data.lastMessage\n        ),\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(\n          state.conversations,\n          { _id: action.data.conversation_id },\n          action.data.writing\n        ),\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: copyAndUpdate(\n            state.conversations,\n            { _id: action.data.conversation_id },\n            { lastMessage: action.message }\n          ),\n          isLoaded: true,\n        };\n      } else {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}