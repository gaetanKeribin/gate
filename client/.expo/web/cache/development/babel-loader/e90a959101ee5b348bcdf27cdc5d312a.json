{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gaetan/Documents/GATE/app/client/src/components/CustomOverlay/SearchBar.js\";\nimport React, { useState } from \"react\";\nimport { apiConfig } from \"../../config\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport axios from \"axios\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar SearchBar = function SearchBar(_ref) {\n  var _searchBar$selectFrom;\n\n  var searchBar = _ref.searchBar,\n      dispatchRedirectReset = _ref.dispatchRedirectReset,\n      theme = _ref.theme;\n\n  var _useState = useState(searchBar.initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      suggestions = _useState4[0],\n      setSuggestions = _useState4[1];\n\n  var search = \"cities\";\n  var searchIn = {\n    firstname: [\"bonjour\"],\n    lastname: [\"ldskfjs\"]\n  };\n\n  var handleChangeText = function handleChangeText(text) {\n    var _await$axios$get, data;\n\n    return _regeneratorRuntime.async(function handleChangeText$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setValue(text);\n\n            if (!(text === \"\")) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setSuggestions([]));\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(apiConfig.baseUrl + \"/api/complete/\" + searchBar.searchFor + \"/\" + text));\n\n          case 5:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            setSuggestions(data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var SuggestionItem = function SuggestionItem(_ref2) {\n    var _item$other;\n\n    var item = _ref2.item;\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        searchBar.onPressSuggestion([item.value, item.title]);\n        dispatchRedirectReset();\n      },\n      style: styles.suggestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, item.title, (_item$other = item.other) == null ? void 0 : _item$other.map(function (o) {\n      return \" - \" + o;\n    })));\n  };\n\n  return React.createElement(View, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, searchBar.searchFor && React.createElement(TextInput, {\n    autoFocus: true,\n    value: value,\n    placeholder: searchBar.placeholder,\n    placeholderTextColor: \"grey\",\n    onChangeText: function onChangeText(text) {\n      return handleChangeText(text);\n    },\n    style: [theme.TextInput, {\n      height: 40,\n      width: Dimensions.get(\"window\").width - 100\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), React.createElement(ScrollView, {\n    style: styles.suggestionsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, suggestions.map(function (s, i) {\n    return React.createElement(SuggestionItem, {\n      item: s,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    });\n  }), (_searchBar$selectFrom = searchBar.selectFrom) == null ? void 0 : _searchBar$selectFrom.map(function (s, i) {\n    return React.createElement(SuggestionItem, {\n      item: s,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    });\n  })));\n};\n\nexport default SearchBar;\nvar styles = StyleSheet.create({\n  root: {\n    backgroundColor: \"white\",\n    borderRadius: 10,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    elevation: 1,\n    shadowColor: \"black\",\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 20\n  },\n  suggestionsContainer: {\n    height: 200\n  },\n  suggestion: {\n    paddingHorizontal: 2,\n    paddingVertical: 4\n  }\n});","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/CustomOverlay/SearchBar.js"],"names":["React","useState","apiConfig","axios","ScrollView","SearchBar","searchBar","dispatchRedirectReset","theme","initialValue","value","setValue","suggestions","setSuggestions","search","searchIn","firstname","lastname","handleChangeText","text","get","baseUrl","searchFor","data","SuggestionItem","item","onPressSuggestion","title","styles","suggestion","other","map","o","root","placeholder","TextInput","height","width","Dimensions","suggestionsContainer","s","i","selectFrom","StyleSheet","create","backgroundColor","borderRadius","paddingHorizontal","paddingVertical","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { apiConfig } from \"../../config\";\nimport {\n  View,\n  TextInput,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n} from \"react-native\";\nimport axios from \"axios\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Dimensions } from \"react-native\";\n\nconst SearchBar = ({ searchBar, dispatchRedirectReset, theme }) => {\n  const [value, setValue] = useState(searchBar.initialValue);\n  const [suggestions, setSuggestions] = useState([]);\n\n  const search = \"cities\";\n  const searchIn = { firstname: [\"bonjour\"], lastname: [\"ldskfjs\"] };\n\n  const handleChangeText = async (text) => {\n    setValue(text);\n    if (text === \"\") {\n      return setSuggestions([]);\n    }\n\n    const { data } = await axios.get(\n      `${apiConfig.baseUrl}/api/complete/${searchBar.searchFor}/${text}`\n    );\n    setSuggestions(data);\n  };\n\n  const SuggestionItem = ({ item }) => {\n    return (\n      <TouchableOpacity\n        onPress={() => {\n          searchBar.onPressSuggestion([item.value, item.title]);\n          dispatchRedirectReset();\n        }}\n        style={styles.suggestion}\n      >\n        <Text>\n          {item.title}\n          {item.other?.map((o) => \" - \" + o)}\n        </Text>\n      </TouchableOpacity>\n    );\n  };\n  return (\n    <View style={styles.root}>\n      {searchBar.searchFor && (\n        <TextInput\n          autoFocus={true}\n          value={value}\n          placeholder={searchBar.placeholder}\n          placeholderTextColor=\"grey\"\n          onChangeText={(text) => handleChangeText(text)}\n          style={[\n            theme.TextInput,\n            { height: 40, width: Dimensions.get(\"window\").width - 100 },\n          ]}\n        />\n      )}\n      <ScrollView style={styles.suggestionsContainer}>\n        {suggestions.map((s, i) => (\n          <SuggestionItem item={s} key={i} />\n        ))}\n        {searchBar.selectFrom?.map((s, i) => (\n          <SuggestionItem item={s} key={i} />\n        ))}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default SearchBar;\n\nconst styles = StyleSheet.create({\n  root: {\n    backgroundColor: \"white\",\n    borderRadius: 10,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    elevation: 1,\n    shadowColor: \"black\",\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0.5,\n    shadowRadius: 20,\n  },\n  suggestionsContainer: {\n    height: 200,\n  },\n  suggestion: {\n    paddingHorizontal: 2,\n    paddingVertical: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}