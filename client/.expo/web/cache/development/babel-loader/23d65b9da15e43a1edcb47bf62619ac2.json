{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nimport _ from \"lodash\";\n\nvar copyAndUpdate = function copyAndUpdate(array, i, update) {\n  var copy = [];\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat(_objectSpread({}, array[index], {}, update));\n  copy.concat(index + 1);\n  return copy;\n};\n\nexport default function () {\n  var _action$payload;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var i = _.findIndex(state.conversations, {\n    _id: (_action$payload = action.payload) == null ? void 0 : _action$payload.conversation_id\n  });\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: copyAndUpdate(state.conversations, i, action.data.conversation),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"RECEIVE_READ_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          readAck: action.data.reacAck\n        }),\n        isLoaded: true\n      });\n\n    case \"RECEIVE_WRITING_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          writing: action.data.writing\n        })\n      });\n\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.payload.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"RECEIVE_NEW_MESSAGE\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          lastMessage: action.message,\n          messages: Array.isArray(state.conversations[i].messages) ? [action.message].concat(_toConsumableArray(state.conversations[i].messages)) : [action.message]\n        })\n      });\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","copyAndUpdate","array","i","update","copy","concat","slice","index","state","action","findIndex","_id","payload","conversation_id","type","receivedAt","data","conversation","readAck","reacAck","writing","lastMessage","message","messages","Array","isArray"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\nconst copyAndUpdate = (array, i, update) => {\n  let copy = [];\n\n  if (i > 0) copy.concat(array.slice(0, index));\n  copy.concat({ ...array[index], ...update });\n  copy.concat(index + 1);\n\n  return copy;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations, {\n    _id: action.payload?.conversation_id,\n  });\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: copyAndUpdate(\n          state.conversations,\n          i,\n          action.data.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          readAck: action.data.reacAck,\n        }),\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          writing: action.data.writing,\n        }),\n      };\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.payload.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"RECEIVE_NEW_MESSAGE\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, i, {\n          lastMessage: action.message,\n          messages: Array.isArray(state.conversations[i].messages)\n            ? [action.message, ...state.conversations[i].messages]\n            : [action.message],\n        }),\n      };\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}