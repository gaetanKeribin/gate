{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nimport _ from \"lodash\";\n\nvar copyAndUpdate = function copyAndUpdate(array, search, update, deep) {\n  var copy = [];\n\n  var index = _.findIndex(state.conversations, search);\n\n  if (index > 0) updatedArray.concat(array.slice(0, index));\n  updatedArray.concat(_objectSpread({}, array[index], {}, update));\n  updatedArray.concat(index + 1);\n  console.log(object.a[0].b.c);\n  return updatedArray;\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }, action.data.conversation),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"RECEIVE_READ_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }, action.data.readAck),\n        isLoaded: true\n      });\n\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: [_objectSpread({}, state.conversations[i], {\n          writing: action.wrintingData\n        })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n          return conv._id !== action.message.conversation_id;\n        }))),\n        isLoaded: true\n      });\n\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [returnUpdatedArray(state.conversations, i, _objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: returnUpdatedArray(state.conversations[i].messages, action.message)\n          }))],\n          isLoaded: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [_objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: [action.message]\n          })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n            return conv._id !== action.message.conversation_id;\n          }))),\n          isLoaded: true\n        });\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","copyAndUpdate","array","search","update","deep","copy","index","findIndex","state","updatedArray","concat","slice","console","log","object","a","b","c","action","i","type","receivedAt","data","_id","conversation_id","conversation","readAck","writing","wrintingData","filter","conv","message","messages","returnUpdatedArray","lastMessage"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\n// {\n//   data: {conversation_id: \"\"},\n//   type: \"RECEIVE_READ_ACK\"\n// }\n\nconst copyAndUpdate = (array, search, update, deep) => {\n  let copy = [];\n  let index = _.findIndex(state.conversations, search); // {_id:\"\"}\n\n  if (index > 0) updatedArray.concat(array.slice(0, index));\n  updatedArray.concat({ ...array[index], ...update });\n  updatedArray.concat(index + 1);\n\n  console.log(object.a[0].b.c);\n\n  return updatedArray;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: copyAndUpdate(\n          state.conversations,\n          { _id: action.data.conversation_id },\n          action.data.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(\n          state.conversations,\n          { _id: action.data.conversation_id },\n          action.data.readAck\n        ),\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: [\n          {\n            ...state.conversations[i],\n            writing: action.wrintingData,\n          },\n          ...state.conversations.filter(\n            (conv) => conv._id !== action.message.conversation_id\n          ),\n        ],\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            returnUpdatedArray(state.conversations, i, {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: returnUpdatedArray(\n                state.conversations[i].messages,\n                action.message\n              ),\n            }),\n          ],\n          isLoaded: true,\n        };\n      } else {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}