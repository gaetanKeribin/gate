{"ast":null,"code":"import * as FileSystem from \"expo-file-system\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nfunction dataURLtoBlob(dataurl) {\n  var arr = dataurl.split(\",\"),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], {\n    type: mime\n  });\n}\n\nexport var fetchFile = function fetchFile(bucketName, fileId) {\n  return {\n    type: \"REQUEST_FILE\",\n    route: \"files/\" + bucketName + \"/\" + fileId,\n    method: \"GET\"\n  };\n};\nexport var deleteFile = function deleteFile(bucketName, fileId) {\n  return {\n    type: \"REQUEST_DELETE_FILE\",\n    route: \"files/\" + bucketName + \"/\" + fileId,\n    method: \"DELETE\",\n    successNotification: {\n      message: \"Votre document a bien été supprimé de la base de données.\",\n      variant: \"success\",\n      timeout: 2000\n    },\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000\n    }\n  };\n};\nexport var uploadFile = function uploadFile(file, bucketName, name) {\n  var formData = new FormData();\n  var blob = dataURLtoBlob(file.uri);\n  formData.append(\"file\", blob);\n  name && formData.append(\"name\", name);\n  return {\n    type: \"REQUEST_UPLOAD_FILE\",\n    route: \"files/\" + bucketName,\n    payload: formData,\n    method: \"POST\",\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000\n    }\n  };\n};","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/actions/filesActions.js"],"names":["FileSystem","dataURLtoBlob","dataurl","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","fetchFile","bucketName","fileId","route","method","deleteFile","successNotification","message","variant","timeout","errorNotification","uploadFile","file","name","formData","FormData","blob","uri","append","payload"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;;;AAGA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,MAAIC,GAAG,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAV;AAAA,MACEC,IAAI,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,EAAwB,CAAxB,CADT;AAAA,MAEEC,IAAI,GAAGC,IAAI,CAACL,GAAG,CAAC,CAAD,CAAJ,CAFb;AAAA,MAGEM,CAAC,GAAGF,IAAI,CAACG,MAHX;AAAA,MAIEC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,CAAf,CAJV;;AAKA,SAAOA,CAAC,EAAR,EAAY;AACVE,IAAAA,KAAK,CAACF,CAAD,CAAL,GAAWF,IAAI,CAACM,UAAL,CAAgBJ,CAAhB,CAAX;AACD;;AACD,SAAO,IAAIK,IAAJ,CAAS,CAACH,KAAD,CAAT,EAAkB;AAAEI,IAAAA,IAAI,EAAEV;AAAR,GAAlB,CAAP;AACD;;AAED,OAAO,IAAMW,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAaC,MAAb,EAAwB;AAC/C,SAAO;AACLH,IAAAA,IAAI,EAAE,cADD;AAELI,IAAAA,KAAK,aAAWF,UAAX,SAAyBC,MAFzB;AAGLE,IAAAA,MAAM,EAAE;AAHH,GAAP;AAKD,CANM;AAQP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACJ,UAAD,EAAaC,MAAb,EAAwB;AAChD,SAAO;AACLH,IAAAA,IAAI,EAAE,qBADD;AAELI,IAAAA,KAAK,aAAWF,UAAX,SAAyBC,MAFzB;AAGLE,IAAAA,MAAM,EAAE,QAHH;AAILE,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,OAAO,EAAE,2DADU;AAEnBC,MAAAA,OAAO,EAAE,SAFU;AAGnBC,MAAAA,OAAO,EAAE;AAHU,KAJhB;AASLC,IAAAA,iBAAiB,EAAE;AACjBH,MAAAA,OAAO,EAAE,4CADQ;AAEjBC,MAAAA,OAAO,EAAE,OAFQ;AAGjBC,MAAAA,OAAO,EAAE;AAHQ;AATd,GAAP;AAeD,CAhBM;AAkBP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOX,UAAP,EAAmBY,IAAnB,EAA4B;AACpD,MAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AAEA,MAAIC,IAAI,GAAG/B,aAAa,CAAC2B,IAAI,CAACK,GAAN,CAAxB;AACAH,EAAAA,QAAQ,CAACI,MAAT,CAAgB,MAAhB,EAAwBF,IAAxB;AAEAH,EAAAA,IAAI,IAAIC,QAAQ,CAACI,MAAT,CAAgB,MAAhB,EAAwBL,IAAxB,CAAR;AAEA,SAAO;AACLd,IAAAA,IAAI,EAAE,qBADD;AAELI,IAAAA,KAAK,aAAWF,UAFX;AAGLkB,IAAAA,OAAO,EAAEL,QAHJ;AAILV,IAAAA,MAAM,EAAE,MAJH;AAKLM,IAAAA,iBAAiB,EAAE;AACjBH,MAAAA,OAAO,EAAE,4CADQ;AAEjBC,MAAAA,OAAO,EAAE,OAFQ;AAGjBC,MAAAA,OAAO,EAAE;AAHQ;AALd,GAAP;AAWD,CAnBM","sourcesContent":["import * as FileSystem from \"expo-file-system\";\nimport { Platform } from \"react-native\";\n\nfunction dataURLtoBlob(dataurl) {\n  var arr = dataurl.split(\",\"),\n    mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]),\n    n = bstr.length,\n    u8arr = new Uint8Array(n);\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], { type: mime });\n}\n\nexport const fetchFile = (bucketName, fileId) => {\n  return {\n    type: \"REQUEST_FILE\",\n    route: `files/${bucketName}/${fileId}`,\n    method: \"GET\",\n  };\n};\n\nexport const deleteFile = (bucketName, fileId) => {\n  return {\n    type: \"REQUEST_DELETE_FILE\",\n    route: `files/${bucketName}/${fileId}`,\n    method: \"DELETE\",\n    successNotification: {\n      message: \"Votre document a bien été supprimé de la base de données.\",\n      variant: \"success\",\n      timeout: 2000,\n    },\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000,\n    },\n  };\n};\n\nexport const uploadFile = (file, bucketName, name) => {\n  let formData = new FormData();\n\n  let blob = dataURLtoBlob(file.uri);\n  formData.append(\"file\", blob);\n\n  name && formData.append(\"name\", name);\n\n  return {\n    type: \"REQUEST_UPLOAD_FILE\",\n    route: `files/${bucketName}`,\n    payload: formData,\n    method: \"POST\",\n    errorNotification: {\n      message: \"Cela n'a pas marché... Essayez de nouveau.\",\n      variant: \"error\",\n      timeout: 2000,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}