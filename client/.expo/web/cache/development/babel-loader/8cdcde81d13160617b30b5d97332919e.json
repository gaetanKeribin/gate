{"ast":null,"code":"var _jsxFileName = \"/home/gaetan/Documents/GATE/app/client/src/components/CustomOverlay/index.js\";\nimport React, { useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ThemeContext } from \"react-native-elements\";\nimport { resetOverlay } from \"../../actions/overlayAction\";\nimport * as RootNavigation from \"../../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport SearchBar from \"./SearchBar\";\nimport DateInput from \"./DateInput\";\nimport Notification from \"./Notification\";\nimport SmallForm from \"./SmallForm\";\nimport Menu from \"./Menu\";\n\nvar CustomOverlay = function CustomOverlay() {\n  var overlay = useSelector(function (state) {\n    return state.overlay;\n  });\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var dispatch = useDispatch();\n  if (overlay.show === false) return null;\n\n  var dispatchRedirectReset = function dispatchRedirectReset() {\n    dispatch(resetOverlay());\n    Array.isArray(overlay.callbacks) && overlay.callbacks.forEach(function (d) {\n      dispatch(d());\n    });\n    overlay.redirect && RootNavigation.navigate(overlay.redirect, overlay.redirectOpts);\n  };\n\n  overlay.timeout && setTimeout(function () {\n    dispatchRedirectReset();\n  }, overlay.timeout);\n  return React.createElement(View, {\n    style: [styles.root],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    containerStyle: styles.sides,\n    style: styles.sides,\n    onPress: function onPress() {\n      overlay.notification ? dispatchRedirectReset() : dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    containerStyle: styles.sides,\n    style: styles.sides,\n    onPress: function onPress() {\n      overlay.notification ? dispatchRedirectReset() : dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), overlay.notification && React.createElement(Notification, {\n    notification: overlay.notification,\n    dispatchRedirectReset: dispatchRedirectReset,\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), overlay.form && React.createElement(InputForm, {\n    form: overlay.form,\n    dispatchRedirectReset: dispatchRedirectReset,\n    dispatch: dispatch,\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), overlay.menu && React.createElement(Menu, {\n    menu: overlay.menu,\n    dispatchRedirectReset: dispatchRedirectReset,\n    dispatch: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), overlay.searchBar && React.createElement(SearchBar, {\n    searchBar: overlay.searchBar,\n    dispatchRedirectReset: dispatchRedirectReset,\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), overlay.dateInput && React.createElement(DateInput, {\n    dateInput: overlay.dateInput,\n    dispatchRedirectReset: dispatchRedirectReset,\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), React.createElement(TouchableOpacity, {\n    containerStyle: styles.sides,\n    style: styles.sides,\n    onPress: function onPress() {\n      overlay.notification ? dispatchRedirectReset() : dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    containerStyle: styles.sides,\n    style: styles.sides,\n    onPress: function onPress() {\n      overlay.notification ? dispatchRedirectReset() : dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CustomOverlay;\nvar styles = StyleSheet.create({\n  root: {\n    position: \"absolute\",\n    height: Dimensions.get(\"window\").height,\n    width: Dimensions.get(\"window\").width,\n    alignContent: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"stretch\",\n    backgroundColor: \"rgba(200,200,200,0.5)\"\n  },\n  sides: {\n    flex: 1,\n    minHeight: 12\n  }\n});","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/CustomOverlay/index.js"],"names":["React","useContext","useDispatch","useSelector","ThemeContext","resetOverlay","RootNavigation","TouchableOpacity","SearchBar","DateInput","Notification","SmallForm","Menu","CustomOverlay","overlay","state","theme","dispatch","show","dispatchRedirectReset","Array","isArray","callbacks","forEach","d","redirect","navigate","redirectOpts","timeout","setTimeout","styles","root","sides","notification","flexDirection","alignItems","justifyContent","form","menu","searchBar","dateInput","StyleSheet","create","position","height","Dimensions","get","width","alignContent","backgroundColor","flex","minHeight"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { View, Dimensions, StyleSheet } from \"react-native\";\nimport { ThemeContext } from \"react-native-elements\";\nimport { resetOverlay } from \"../../actions/overlayAction\";\nimport * as RootNavigation from \"../../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nimport SearchBar from \"./SearchBar\";\nimport DateInput from \"./DateInput\";\nimport Notification from \"./Notification\";\nimport SmallForm from \"./SmallForm\";\nimport Menu from \"./Menu\";\n\nconst CustomOverlay = () => {\n  const overlay = useSelector((state) => state.overlay);\n  const { theme } = useContext(ThemeContext);\n  const dispatch = useDispatch();\n  if (overlay.show === false) return null;\n\n  const dispatchRedirectReset = () => {\n    dispatch(resetOverlay());\n    Array.isArray(overlay.callbacks) &&\n      overlay.callbacks.forEach((d) => {\n        dispatch(d());\n      });\n    overlay.redirect &&\n      RootNavigation.navigate(overlay.redirect, overlay.redirectOpts);\n  };\n\n  overlay.timeout &&\n    setTimeout(() => {\n      dispatchRedirectReset();\n    }, overlay.timeout);\n\n  return (\n    <View style={[styles.root]}>\n      <TouchableOpacity\n        containerStyle={styles.sides}\n        style={styles.sides}\n        onPress={() => {\n          overlay.notification\n            ? dispatchRedirectReset()\n            : dispatch(resetOverlay());\n        }}\n      />\n      <View\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={styles.sides}\n          style={styles.sides}\n          onPress={() => {\n            overlay.notification\n              ? dispatchRedirectReset()\n              : dispatch(resetOverlay());\n          }}\n        />\n        {overlay.notification && (\n          <Notification\n            notification={overlay.notification}\n            dispatchRedirectReset={dispatchRedirectReset}\n            theme={theme}\n          />\n        )}\n        {overlay.form && (\n          <InputForm\n            form={overlay.form}\n            dispatchRedirectReset={dispatchRedirectReset}\n            dispatch={dispatch}\n            theme={theme}\n          />\n        )}\n        {overlay.menu && (\n          <Menu\n            menu={overlay.menu}\n            dispatchRedirectReset={dispatchRedirectReset}\n            dispatch={dispatch}\n          />\n        )}\n        {overlay.searchBar && (\n          <SearchBar\n            searchBar={overlay.searchBar}\n            dispatchRedirectReset={dispatchRedirectReset}\n            theme={theme}\n          />\n        )}\n        {overlay.dateInput && (\n          <DateInput\n            dateInput={overlay.dateInput}\n            dispatchRedirectReset={dispatchRedirectReset}\n            theme={theme}\n          />\n        )}\n        <TouchableOpacity\n          containerStyle={styles.sides}\n          style={styles.sides}\n          onPress={() => {\n            overlay.notification\n              ? dispatchRedirectReset()\n              : dispatch(resetOverlay());\n          }}\n        />\n      </View>\n      <TouchableOpacity\n        containerStyle={styles.sides}\n        style={styles.sides}\n        onPress={() => {\n          overlay.notification\n            ? dispatchRedirectReset()\n            : dispatch(resetOverlay());\n        }}\n      />\n    </View>\n  );\n};\n\nexport default CustomOverlay;\n\nconst styles = StyleSheet.create({\n  root: {\n    position: \"absolute\",\n    height: Dimensions.get(\"window\").height,\n    width: Dimensions.get(\"window\").width,\n    alignContent: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"stretch\",\n    backgroundColor: \"rgba(200,200,200,0.5)\",\n  },\n  sides: { flex: 1, minHeight: 12 },\n});\n"]},"metadata":{},"sourceType":"module"}