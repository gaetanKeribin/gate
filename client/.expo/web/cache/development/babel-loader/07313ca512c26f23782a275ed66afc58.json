{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetNotification } from \"../actions/notifyActions\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport Constants from \"expo-constants\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar Notifier = function Notifier(_ref) {\n  var notification = _ref.notification,\n      reset = _ref.reset;\n\n  var _useState = useState(\"handleWrite\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      input = _useState2[0],\n      setInput = _useState2[1];\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  notification.message && setTimeout(function () {\n    reset();\n    console.log(notification.redirect);\n    notification.redirect && RootNavigation.navigate(notification.redirect, {});\n  }, notification.timeout);\n\n  if (notification.format === \"partial\") {\n    return;\n  } else if (notification.format === \"full\") {\n    return React.createElement(View, {\n      style: {\n        position: \"absolute\",\n        height: Dimensions.get(\"window\").height,\n        width: Dimensions.get(\"window\").width,\n        backgroundColor: theme.colors.grey6,\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\"\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1\n      },\n      onPress: function onPress() {\n        return reset();\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        flexShrink: 1\n      },\n      style: {\n        flex: 1\n      },\n      onPress: function onPress() {\n        return reset();\n      }\n    }), React.createElement(View, {\n      style: {\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingHorizontal: 8,\n        paddingVertical: 12,\n        elevation: 8\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"baseline\",\n        justifyContent: \"space-between\",\n        alignSelf: \"stretch\"\n      }\n    }, React.createElement(Icon, {\n      containerStyle: {\n        marginBottom: 8\n      },\n      size: 20,\n      name: notification.variant === \"success\" ? \"check-circle-outline\" : notification.variant === \"warning\" ? \"alert-circle-outline\" : notification.variant === \"error\" ? \"close-circle-outline\" : notification.icon,\n      color: notification.variant === \"success\" ? \"green\" : notification.variant === \"warning\" ? \"yellow\" : notification.variant === \"error\" ? \"red\" : notification.variant === \"error\" ? \"blue\" : theme.colors.grey1\n    }), React.createElement(Text, null, notification.title), React.createElement(Icon, {\n      containerStyle: {\n        marginBottom: 8,\n        alignSelf: \"flex-end\"\n      },\n      name: \"close\",\n      size: 20,\n      color: theme.colors.grey1,\n      onPress: function onPress() {\n        return reset();\n      }\n    })), notification.message && React.createElement(Text, {\n      style: {\n        fontSize: 14\n      }\n    }, notification.message)), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1\n      },\n      style: {\n        flex: 1\n      },\n      onPress: function onPress() {\n        return reset();\n      }\n    })), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1\n      },\n      onPress: function onPress() {\n        return reset();\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    notification: state.notification\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    reset: function reset() {\n      return dispatch(resetNotification());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifier);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/Notifier.js"],"names":["React","useEffect","useContext","useState","connect","Icon","ThemeContext","Button","resetNotification","RootNavigation","Constants","TouchableOpacity","Notifier","notification","reset","input","setInput","theme","message","setTimeout","console","log","redirect","navigate","timeout","format","position","height","Dimensions","get","width","backgroundColor","colors","grey6","alignContent","justifyContent","alignItems","flex","minHeight","flexDirection","flexShrink","borderRadius","paddingHorizontal","paddingVertical","elevation","alignSelf","marginBottom","variant","icon","grey1","title","fontSize","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StyleSheet, Text, View, Dimensions, TextInput } from \"react-native\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetNotification } from \"../actions/notifyActions\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport Constants from \"expo-constants\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nconst Notifier = ({ notification, reset }) => {\n  const [input, setInput] = useState(\"handleWrite\");\n  const { theme } = useContext(ThemeContext);\n  notification.message &&\n    setTimeout(() => {\n      reset();\n      console.log(notification.redirect);\n\n      notification.redirect &&\n        RootNavigation.navigate(notification.redirect, {});\n    }, notification.timeout);\n\n  if (notification.format === \"partial\") {\n    return;\n  } else if (notification.format === \"full\") {\n    return (\n      <View\n        style={{\n          position: \"absolute\",\n          height: Dimensions.get(\"window\").height,\n          width: Dimensions.get(\"window\").width,\n          backgroundColor: theme.colors.grey6,\n          alignContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"stretch\"\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1\n          }}\n          onPress={() => reset()}\n        />\n        <View\n          style={{\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          }}\n        >\n          <TouchableOpacity\n            containerStyle={{ flex: 1, flexShrink: 1 }}\n            style={{\n              flex: 1\n            }}\n            onPress={() => reset()}\n          />\n          <View\n            style={{\n              backgroundColor: \"white\",\n              borderRadius: 10,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingHorizontal: 8,\n              paddingVertical: 12,\n              elevation: 8\n            }}\n          >\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"baseline\",\n                justifyContent: \"space-between\",\n                alignSelf: \"stretch\"\n              }}\n            >\n              <Icon\n                containerStyle={{ marginBottom: 8 }}\n                size={20}\n                name={\n                  notification.variant === \"success\"\n                    ? \"check-circle-outline\"\n                    : notification.variant === \"warning\"\n                    ? \"alert-circle-outline\"\n                    : notification.variant === \"error\"\n                    ? \"close-circle-outline\"\n                    : notification.icon\n                }\n                color={\n                  notification.variant === \"success\"\n                    ? \"green\"\n                    : notification.variant === \"warning\"\n                    ? \"yellow\"\n                    : notification.variant === \"error\"\n                    ? \"red\"\n                    : notification.variant === \"error\"\n                    ? \"blue\"\n                    : theme.colors.grey1\n                }\n              />\n              <Text>{notification.title}</Text>\n              <Icon\n                containerStyle={{ marginBottom: 8, alignSelf: \"flex-end\" }}\n                name=\"close\"\n                size={20}\n                color={theme.colors.grey1}\n                onPress={() => reset()}\n              />\n            </View>\n            {notification.message && (\n              <Text style={{ fontSize: 14 }}>{notification.message}</Text>\n            )}\n          </View>\n          <TouchableOpacity\n            containerStyle={{ flex: 1 }}\n            style={{\n              flex: 1\n            }}\n            onPress={() => reset()}\n          />\n        </View>\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1\n          }}\n          onPress={() => reset()}\n        />\n      </View>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst mapStateToProps = state => ({\n  notification: state.notification\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reset: () => dispatch(resetNotification())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifier);\n"]},"metadata":{},"sourceType":"module"}