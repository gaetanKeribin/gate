{"ast":null,"code":"import io from \"socket.io-client\";\nimport axios from \"axios\";\nimport { apiConfig } from \"../config\";\nexport var devMiddleware = function devMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      console.log(action.type, action.data);\n      next(action);\n    };\n  };\n};\nvar socket;\nexport var socketMiddleware = function socketMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === \"REQUEST_LOG_IN:SUCCESS\" || action.type === \"REQUEST_SIGN_UP:SUCCESS\") {\n        var token = action.data.token;\n        socket = io(apiConfig.baseUrl.replace(\"/api/\", \"\"), {\n          forceNode: true,\n          transportOptions: {\n            polling: {\n              extraHeaders: {\n                authorization: token\n              }\n            }\n          }\n        });\n        socket.on(\"connected\", function (data) {\n          console.log(\"Socket connected\");\n        });\n        socket.on(\"authenticated\", function (data) {\n          console.log(\"Socket authenticated\");\n        });\n        socket.on(\"message\", function (data) {\n          store.dispatch({\n            type: \"RECEIVE_MESSAGE\",\n            message: data.message,\n            conversation: data.conversation,\n            newConv: data.newConv,\n            receivedAt: new Date()\n          });\n        });\n      }\n\n      if (action.type.substring(0, 6) === \"SOCKET\") {\n        socket.emit(action.event, action.payload);\n      }\n\n      if (action.type === \"REQUEST_LOG_OUT:SUCCESS\") {\n        socket.disconnect();\n      }\n\n      next(action);\n    };\n  };\n};\nexport var axiosMiddleware = function axiosMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type.substring(0, 7) === \"REQUEST\" && action.type.includes(\":\") === false) {\n        var https;\n\n        if (action.type.substring(0, 14) === \"REQUEST_UPLOAD\") {\n          https = axios.create({\n            baseURL: apiConfig.baseUrl,\n            timeout: 3000,\n            headers: {\n              accept: \"application/json\",\n              \"Content-Type\": \"multipart/form-data\",\n              Authorization: \"Bearer \" + store.getState().auth.token\n            }\n          });\n        } else {\n          https = axios.create({\n            baseURL: apiConfig.baseUrl,\n            timeout: 3000,\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer \" + store.getState().auth.token\n            }\n          });\n        }\n\n        var request = new Promise(function (resolve, reject) {\n          var res;\n\n          switch (action.method) {\n            case \"GET\":\n              res = https.get(action.route);\n              return resolve(res);\n\n            case \"POST\":\n              res = https.post(action.route, action.payload);\n              return resolve(res);\n\n            case \"DELETE\":\n              res = https.delete(action.route, action.payload);\n              return resolve(res);\n\n            case \"PATCH\":\n              res = https.patch(action.route, action.payload);\n              return resolve(res);\n\n            default:\n              return;\n          }\n        });\n        request.then(function (res) {\n          if (action.successNotification) {\n            store.dispatch({\n              type: \"NOTIFY_USER\",\n              notification: action.successNotification\n            });\n          }\n\n          store.dispatch({\n            type: action.type + \":SUCCESS\",\n            data: res.data,\n            receivedAt: new Date()\n          });\n        }).catch(function (err) {\n          console.log(err);\n          store.dispatch({\n            type: action.type + \":ERROR\",\n            error: err,\n            receivedAt: new Date()\n          });\n\n          if (action.errorNotification) {\n            store.dispatch({\n              type: \"NOTIFY_USER\",\n              notification: action.errorNotification\n            });\n          }\n        });\n        next(action);\n      } else {\n        next(action);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/store/reduxMiddlewares.js"],"names":["io","axios","apiConfig","devMiddleware","store","next","action","console","log","type","data","socket","socketMiddleware","token","baseUrl","replace","forceNode","transportOptions","polling","extraHeaders","authorization","on","dispatch","message","conversation","newConv","receivedAt","Date","substring","emit","event","payload","disconnect","axiosMiddleware","includes","https","create","baseURL","timeout","headers","accept","Authorization","getState","auth","request","Promise","resolve","reject","res","method","get","route","post","delete","patch","then","successNotification","notification","catch","err","error","errorNotification"],"mappings":"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","sourcesContent":["import io from \"socket.io-client\";\nimport axios from \"axios\";\nimport { apiConfig } from \"../config\";\n\nexport const devMiddleware = store => next => action => {\n  console.log(action.type, action.data);\n  next(action);\n};\n\nlet socket;\nexport const socketMiddleware = store => next => action => {\n  if (\n    action.type === \"REQUEST_LOG_IN:SUCCESS\" ||\n    action.type === \"REQUEST_SIGN_UP:SUCCESS\"\n  ) {\n    const { token } = action.data;\n\n    socket = io(apiConfig.baseUrl.replace(\"/api/\", \"\"), {\n      forceNode: true,\n      transportOptions: {\n        polling: {\n          extraHeaders: {\n            authorization: token\n          }\n        }\n      }\n    });\n    socket.on(\"connected\", data => {\n      console.log(\"Socket connected\");\n    });\n    socket.on(\"authenticated\", data => {\n      console.log(\"Socket authenticated\");\n    });\n\n    socket.on(\"message\", data => {\n      store.dispatch({\n        type: \"RECEIVE_MESSAGE\",\n        message: data.message,\n        conversation: data.conversation,\n        newConv: data.newConv,\n        receivedAt: new Date()\n      });\n    });\n  }\n  if (action.type.substring(0, 6) === \"SOCKET\") {\n    socket.emit(action.event, action.payload);\n  }\n  if (action.type === \"REQUEST_LOG_OUT:SUCCESS\") {\n    socket.disconnect();\n  }\n  next(action);\n};\n\nexport const axiosMiddleware = store => next => action => {\n  if (\n    action.type.substring(0, 7) === \"REQUEST\" &&\n    action.type.includes(\":\") === false\n  ) {\n    let https;\n    if (action.type.substring(0, 14) === \"REQUEST_UPLOAD\") {\n      https = axios.create({\n        baseURL: apiConfig.baseUrl,\n        timeout: 3000,\n        headers: {\n          accept: \"application/json\",\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${store.getState().auth.token}`\n        }\n      });\n    } else {\n      https = axios.create({\n        baseURL: apiConfig.baseUrl,\n        timeout: 3000,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${store.getState().auth.token}`\n        }\n      });\n    }\n    const request = new Promise(function(resolve, reject) {\n      let res;\n\n      switch (action.method) {\n        case \"GET\":\n          res = https.get(action.route);\n          return resolve(res);\n        case \"POST\":\n          res = https.post(action.route, action.payload);\n          return resolve(res);\n        case \"DELETE\":\n          res = https.delete(action.route, action.payload);\n          return resolve(res);\n        case \"PATCH\":\n          res = https.patch(action.route, action.payload);\n          return resolve(res);\n        default:\n          return;\n      }\n    });\n    request\n      .then(res => {\n        if (action.successNotification) {\n          store.dispatch({\n            type: \"NOTIFY_USER\",\n            notification: action.successNotification\n          });\n        }\n        store.dispatch({\n          type: `${action.type}:SUCCESS`,\n          data: res.data,\n          receivedAt: new Date()\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        store.dispatch({\n          type: `${action.type}:ERROR`,\n          error: err,\n          receivedAt: new Date()\n        });\n        if (action.errorNotification) {\n          store.dispatch({\n            type: \"NOTIFY_USER\",\n            notification: action.errorNotification\n          });\n        }\n      });\n\n    next(action);\n  } else {\n    next(action);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}