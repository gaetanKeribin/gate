{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport { Provider, useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { store, persistor } from \"./store/index\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { ThemeProvider, Icon } from \"react-native-elements\";\nimport { SplashScreen } from \"expo\";\nimport MyJobs from \"./components/MyJobs\";\nimport Jobs from \"./components/Jobs\";\nimport Profile from \"./components/Profile\";\nimport People from \"./components/People\";\nimport Messages from \"./components/Messages\";\nimport Auth from \"./components/Auth\";\nimport CustomOverlay from \"./components/CustomOverlay\";\nimport theme from \"./Theme.json\";\nimport { navigationRef, isMountedRef } from \"./RootNavigation\";\nimport { verifyToken } from \"./actions/authActions\";\nimport useLinking from \"./useLinking\";\nvar BottomTab = createBottomTabNavigator();\nvar Drawer = createDrawerNavigator();\nvar Switch = createStackNavigator();\n\nvar MainStack = function MainStack() {\n  return React.createElement(BottomTab.Navigator, {\n    initialRouteName: \"People\",\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          switch (route.name) {\n            case \"Home\":\n              iconName = \"home\";\n              break;\n\n            case \"Jobs\":\n              iconName = \"briefcase\";\n              break;\n\n            case \"People\":\n              iconName = \"account-group\";\n              break;\n\n            case \"Messages\":\n              iconName = \"forum\";\n              break;\n\n            default:\n              break;\n          }\n\n          return React.createElement(Icon, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      activeTintColor: theme.colors.primary,\n      inactiveTintColor: \"gray\"\n    }\n  }, React.createElement(BottomTab.Screen, {\n    name: \"People\",\n    component: People,\n    options: {\n      title: \"Annuaire\"\n    }\n  }), React.createElement(BottomTab.Screen, {\n    name: \"Jobs\",\n    component: Jobs,\n    options: {\n      title: \"Emplois\"\n    }\n  }), React.createElement(BottomTab.Screen, {\n    name: \"Messages\",\n    component: Messages,\n    options: {\n      title: \"Messages\"\n    }\n  }));\n};\n\nvar DrawerStack = function DrawerStack() {\n  return React.createElement(Drawer.Navigator, {\n    initialRouteName: \"Main\",\n    headerMode: \"screen\"\n  }, React.createElement(Drawer.Screen, {\n    name: \"Main\",\n    component: MainStack,\n    options: {\n      title: \"Accueil\"\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Profile\",\n    component: Profile,\n    options: {\n      title: \"Mon profil\"\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"MyJobs\",\n    component: MyJobs,\n    options: {\n      title: \"Mes offres d'emplois\"\n    }\n  }));\n};\n\nvar AppStack = function AppStack() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      initialNavigationState = _React$useState2[0],\n      setInitialNavigationState = _React$useState2[1];\n\n  var containerRef = React.useRef();\n  var dispatch = useDispatch();\n  var userToken = useSelector(function (state) {\n    return state.auth.token;\n  }, shallowEqual);\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (userToken !== null) {\n                dispatch(verifyToken());\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var linking = {\n    prefixes: [\"https://mychat.com\", \"mychat://\"],\n    config: {\n      Home: \"feed/:sort\"\n    }\n  };\n  return React.createElement(NavigationContainer, {\n    ref: navigationRef,\n    linking: linking,\n    initialState: initialNavigationState\n  }, React.createElement(Switch.Navigator, {\n    headerMode: \"none\"\n  }, userToken && React.createElement(Switch.Screen, {\n    name: \"Root\",\n    component: DrawerStack\n  }), !userToken && React.createElement(Switch.Screen, {\n    name: \"Auth\",\n    component: Auth\n  })), React.createElement(CustomOverlay, null));\n};\n\nvar App = function App() {\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      return isMountedRef.current = false;\n    };\n  }, []);\n  return React.createElement(Provider, {\n    store: store\n  }, React.createElement(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(SafeAreaView, {\n    style: {\n      flex: 1,\n      flexDirection: \"row\",\n      justifyContent: \"center\"\n    }\n  }, Platform.OS === \"ios\" && React.createElement(StatusBar, {\n    barStyle: \"default\"\n  }), React.createElement(AppStack, null)))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/App.js"],"names":["React","Provider","useSelector","shallowEqual","useDispatch","store","persistor","PersistGate","NavigationContainer","createBottomTabNavigator","createStackNavigator","createDrawerNavigator","ThemeProvider","Icon","SplashScreen","MyJobs","Jobs","Profile","People","Messages","Auth","CustomOverlay","theme","navigationRef","isMountedRef","verifyToken","useLinking","BottomTab","Drawer","Switch","MainStack","route","tabBarIcon","focused","color","size","iconName","name","activeTintColor","colors","primary","inactiveTintColor","title","DrawerStack","AppStack","useState","initialNavigationState","setInitialNavigationState","containerRef","useRef","dispatch","userToken","state","auth","token","useEffect","bootstrapAsync","linking","prefixes","config","Home","App","current","flex","flexDirection","justifyContent","Platform","OS"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Provider, useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { SafeAreaView, Platform, StatusBar } from \"react-native\";\nimport { store, persistor } from \"./store/index\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { ThemeProvider, Icon } from \"react-native-elements\";\nimport { SplashScreen } from \"expo\";\n\nimport MyJobs from \"./components/MyJobs\";\nimport Jobs from \"./components/Jobs\";\nimport Profile from \"./components/Profile\";\nimport People from \"./components/People\";\nimport Messages from \"./components/Messages\";\nimport Auth from \"./components/Auth\";\nimport CustomOverlay from \"./components/CustomOverlay\";\nimport theme from \"./Theme.json\";\nimport { navigationRef, isMountedRef } from \"./RootNavigation\";\nimport { verifyToken } from \"./actions/authActions\";\nimport useLinking from \"./useLinking\";\n\nconst BottomTab = createBottomTabNavigator();\nconst Drawer = createDrawerNavigator();\nconst Switch = createStackNavigator();\n\nconst MainStack = () => {\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"People\"\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          switch (route.name) {\n            case \"Home\":\n              iconName = \"home\";\n              break;\n            case \"Jobs\":\n              iconName = \"briefcase\";\n              break;\n            case \"People\":\n              iconName = \"account-group\";\n              break;\n            case \"Messages\":\n              iconName = \"forum\";\n              break;\n            default:\n              break;\n          }\n\n          return <Icon name={iconName} size={size} color={color} />;\n        },\n      })}\n      tabBarOptions={{\n        activeTintColor: theme.colors.primary,\n        inactiveTintColor: \"gray\",\n      }}\n    >\n      <BottomTab.Screen\n        name=\"People\"\n        component={People}\n        options={{ title: \"Annuaire\" }}\n      />\n      <BottomTab.Screen\n        name=\"Jobs\"\n        component={Jobs}\n        options={{ title: \"Emplois\" }}\n      />\n      <BottomTab.Screen\n        name=\"Messages\"\n        component={Messages}\n        options={{ title: \"Messages\" }}\n      />\n    </BottomTab.Navigator>\n  );\n};\n\nconst DrawerStack = () => {\n  return (\n    <Drawer.Navigator initialRouteName=\"Main\" headerMode=\"screen\">\n      <Drawer.Screen\n        name=\"Main\"\n        component={MainStack}\n        options={{ title: \"Accueil\" }}\n      />\n      <Drawer.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{ title: \"Mon profil\" }}\n      />\n      <Drawer.Screen\n        name=\"MyJobs\"\n        component={MyJobs}\n        options={{ title: \"Mes offres d'emplois\" }}\n      />\n    </Drawer.Navigator>\n  );\n};\n\nconst AppStack = () => {\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const dispatch = useDispatch();\n\n  const userToken = useSelector((state) => state.auth.token, shallowEqual);\n  React.useEffect(() => {\n    const bootstrapAsync = async () => {\n      if (userToken !== null) {\n        dispatch(verifyToken());\n      }\n    };\n    bootstrapAsync();\n  }, []);\n\n  const linking = {\n    prefixes: [\"https://mychat.com\", \"mychat://\"],\n    config: {\n      Home: \"feed/:sort\",\n    },\n  };\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      linking={linking}\n      initialState={initialNavigationState}\n    >\n      <Switch.Navigator headerMode=\"none\">\n        {userToken && <Switch.Screen name=\"Root\" component={DrawerStack} />}\n        {!userToken && <Switch.Screen name=\"Auth\" component={Auth} />}\n      </Switch.Navigator>\n      <CustomOverlay />\n    </NavigationContainer>\n  );\n};\n\nconst App = () => {\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => (isMountedRef.current = false);\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <SafeAreaView\n            style={{\n              flex: 1,\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n            <AppStack />\n          </SafeAreaView>\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}