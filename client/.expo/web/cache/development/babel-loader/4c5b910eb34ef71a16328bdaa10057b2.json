{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gaetan/Documents/GATE/app/frontend/src/components/PostScreen.js\";\nimport React, { useState } from \"react\";\nimport theme from \"../Theme.json\";\nimport { connect } from \"react-redux\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { ButtonGroup, Input, Button, Icon } from \"react-native-elements\";\nimport AppNavbar from \"./AppNavbar\";\nimport { createJob as _createJob } from \"../actions/jobsActions\";\nimport { createPost as _createPost } from \"../actions/postsActions\";\n\nvar PostScreen = function PostScreen(_ref) {\n  var createJob = _ref.createJob,\n      createPost = _ref.createPost,\n      navigation = _ref.navigation;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errors = _useState4[0],\n      setErrors = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tags = _useState6[0],\n      setTags = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      postText = _useState8[0],\n      setPostText = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      employmentType = _useState10[0],\n      setEmploymentType = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      asap = _useState12[0],\n      setAsap = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      organisation = _useState14[0],\n      setOrganisation = _useState14[1];\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      city = _useState16[0],\n      setCity = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      salary = _useState18[0],\n      setSalary = _useState18[1];\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      jobTitle = _useState20[0],\n      setJobTitle = _useState20[1];\n\n  var _useState21 = useState(),\n      _useState22 = _slicedToArray(_useState21, 2),\n      jobDesc = _useState22[0],\n      setJobDesc = _useState22[1];\n\n  var _useState23 = useState(),\n      _useState24 = _slicedToArray(_useState23, 2),\n      minExp = _useState24[0],\n      setMinExp = _useState24[1];\n\n  var _useState25 = useState(),\n      _useState26 = _slicedToArray(_useState25, 2),\n      contact = _useState26[0],\n      setContact = _useState26[1];\n\n  var buttons = [\"Je recrute\", \"Je poste un sujet\"];\n\n  var uploadJobOffer = function uploadJobOffer() {\n    var jobOffer;\n    return _regeneratorRuntime.async(function uploadJobOffer$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            jobOffer = {\n              employmentType: employmentType,\n              asap: asap,\n              organisation: organisation,\n              city: city,\n              salary: salary,\n              jobDesc: jobDesc,\n              jobTitle: jobTitle,\n              minExp: minExp,\n              contact: contact\n            };\n            createJob(jobOffer);\n            setAsap(false);\n            setCity();\n            setSalary();\n            setContact();\n            setErrors({});\n            setEmploymentType();\n            setOrganisation();\n            setJobDesc();\n            setJobTitle();\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, React.createElement(AppNavbar, {\n    navigation: navigation,\n    title: \"Publier\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, index === 0 && React.createElement(ScrollView, {\n    style: {\n      paddingHorizontal: 12,\n      paddingTop: 20,\n      paddingBottom: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, React.createElement(Input, {\n    label: \"Type de contrat*\",\n    placeholder: \"CDI, CDD, Apprentissage...\",\n    value: employmentType,\n    onChangeText: function onChangeText(value) {\n      return setEmploymentType(value);\n    },\n    errorMessage: errors.employmentType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    label: \"Organisation*\",\n    placeholder: \"Deloitte, Engie, EY...\",\n    value: organisation,\n    onChangeText: function onChangeText(value) {\n      return setOrganisation(value);\n    },\n    errorMessage: errors.organisation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Paris, Shanghai, Lyon...\",\n    label: \"Ville*\",\n    value: city,\n    onChangeText: function onChangeText(value) {\n      return setCity(value);\n    },\n    errorMessage: errors.city,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Auditeur des SI, Pentester junior...\",\n    label: \"Intitul\\xE9 du poste*\",\n    value: jobTitle,\n    onChangeText: function onChangeText(value) {\n      return setJobTitle(value);\n    },\n    errorMessage: errors.jobTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    label: \"Description du poste*\",\n    multiline: true,\n    inputStyle: {\n      height: 200,\n      textAlignVertical: \"top\"\n    },\n    placeholder: \"Les missions, les comp\\xE9tences requises, l'employeur...\",\n    value: jobDesc,\n    onChangeText: function onChangeText(value) {\n      return setJobDesc(value);\n    },\n    errorMessage: errors.jobDesc,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    label: \"Exp\\xE9rience*\",\n    placeholder: \"Ann\\xE9es pass\\xE9es dans un poste similaire\",\n    value: minExp,\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(value) {\n      return setMinExp(value);\n    },\n    errorMessage: errors.minExp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    label: \"R\\xE9mun\\xE9ration\",\n    placeholder: \"En \\u20AC\",\n    keyboardType: \"decimal-pad\",\n    value: salary,\n    onChangeText: function onChangeText(value) {\n      return setSalary(value);\n    },\n    showSoftInputOnFocus: false,\n    errorMessage: errors.salary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: {\n      marginBottom: 12,\n      flexDirection: \"row\",\n      display: \"flex\",\n      height: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: theme.colors.grey3,\n      fontWeight: \"bold\",\n      paddingLeft: 10,\n      fontSize: 16,\n      flex: 1,\n      textAlignVertical: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, \"Poste \\xE0 pourvoir d\\xE8s que possible\"), React.createElement(Switch, {\n    value: asap,\n    onValueChange: function onValueChange(value) {\n      return setAsap(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  })), React.createElement(Input, {\n    label: \"Contact\",\n    placeholder: \"Email\",\n    value: contact,\n    onChangeText: function onChangeText(value) {\n      return setContact(value);\n    },\n    errorMessage: errors.contact,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Poster l'offre d'emploi\",\n    buttonStyle: {\n      height: 50,\n      marginBottom: 12\n    },\n    onPress: function onPress() {\n      uploadJobOffer();\n      navigation.navigate(\"MyJobs\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    createJob: function createJob(job) {\n      return dispatch(_createJob(job));\n    },\n    createPost: function createPost(post) {\n      return dispatch(_createPost(post));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  textInput: {\n    height: 40,\n    width: 0.9,\n    borderWidth: 1,\n    marginTop: 8\n  }\n});","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/PostScreen.js"],"names":["React","useState","theme","connect","ButtonGroup","Input","Button","Icon","AppNavbar","createJob","createPost","PostScreen","navigation","index","setIndex","errors","setErrors","tags","setTags","postText","setPostText","employmentType","setEmploymentType","asap","setAsap","organisation","setOrganisation","city","setCity","salary","setSalary","jobTitle","setJobTitle","jobDesc","setJobDesc","minExp","setMinExp","contact","setContact","buttons","uploadJobOffer","jobOffer","styles","container","flex","backgroundColor","paddingHorizontal","paddingTop","paddingBottom","value","height","textAlignVertical","marginBottom","flexDirection","display","color","colors","grey3","fontWeight","paddingLeft","fontSize","navigate","mapStateToProps","state","auth","mapDispatchToProps","dispatch","job","post","StyleSheet","create","textInput","width","borderWidth","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport theme from \"../Theme.json\";\nimport { connect } from \"react-redux\";\nimport { View, StyleSheet, Switch, Text, ScrollView } from \"react-native\";\nimport { ButtonGroup, Input, Button, Icon } from \"react-native-elements\";\nimport AppNavbar from \"./AppNavbar\";\nimport { createJob } from \"../actions/jobsActions\";\nimport { createPost } from \"../actions/postsActions\";\n\nconst PostScreen = ({ createJob, createPost, navigation }) => {\n  const [index, setIndex] = useState(0);\n\n  const [errors, setErrors] = useState({});\n\n  // Post\n  const [tags, setTags] = useState();\n  const [postText, setPostText] = useState();\n\n  // Job\n  const [employmentType, setEmploymentType] = useState();\n  const [asap, setAsap] = useState(false);\n  const [organisation, setOrganisation] = useState();\n  const [city, setCity] = useState();\n  const [salary, setSalary] = useState();\n  const [jobTitle, setJobTitle] = useState();\n  const [jobDesc, setJobDesc] = useState();\n  const [minExp, setMinExp] = useState();\n  const [contact, setContact] = useState();\n\n  const buttons = [\"Je recrute\", \"Je poste un sujet\"];\n\n  const uploadJobOffer = async () => {\n    const jobOffer = {\n      employmentType,\n      asap,\n      organisation,\n      city,\n      salary,\n      jobDesc,\n      jobTitle,\n      minExp,\n      contact\n    };\n\n    // {\n    //   if (!employmentType) {\n    //     return setErrors({\n    //       employmentType: \"Ce champs est obligatoire.\"\n    //     });\n    //   } else if (!organisation) {\n    //     return setErrors({\n    //       organisation: \"Ce champs est obligatoire.\"\n    //     });\n    //   } else if (!city) {\n    //     return setErrors({\n    //       city: \"Ce champs est obligatoire.\"\n    //     });\n    //   } else if (!jobDesc) {\n    //     return setErrors({\n    //       jobDesc: \"Ce champs est obligatoire.\"\n    //     });\n    //   } else if (!jobTitle) {\n    //     return setErrors({\n    //       jobTitle: \"Ce champs est obligatoire.\"\n    //     });\n    //   } else if (!minExp) {\n    //     return setErrors({\n    //       minExp: \"Ce champs est obligatoire.\"\n    //     });\n    //   }\n    // }\n    createJob(jobOffer);\n\n    {\n      setAsap(false);\n      setCity();\n      setSalary();\n      setContact();\n      setErrors({});\n      setEmploymentType();\n      setOrganisation();\n      setJobDesc();\n      setJobTitle();\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <AppNavbar navigation={navigation} title=\"Publier\" />\n      <View style={{ flex: 1, backgroundColor: \"white\" }}>\n        {/* <ButtonGroup\n          onPress={index => setIndex(index)}\n          selectedIndex={index}\n          buttons={buttons}\n          // containerStyle={{ backgroundColor: \"blue\" }}\n        /> */}\n        {index === 0 && (\n          <ScrollView\n            style={{\n              paddingHorizontal: 12,\n              paddingTop: 20,\n              paddingBottom: 100\n            }}\n          >\n            <Input\n              label=\"Type de contrat*\"\n              placeholder=\"CDI, CDD, Apprentissage...\"\n              value={employmentType}\n              onChangeText={value => setEmploymentType(value)}\n              errorMessage={errors.employmentType}\n            />\n            <Input\n              label=\"Organisation*\"\n              placeholder=\"Deloitte, Engie, EY...\"\n              value={organisation}\n              onChangeText={value => setOrganisation(value)}\n              errorMessage={errors.organisation}\n            />\n            <Input\n              placeholder=\"Paris, Shanghai, Lyon...\"\n              label=\"Ville*\"\n              value={city}\n              onChangeText={value => setCity(value)}\n              errorMessage={errors.city}\n            />\n            <Input\n              placeholder=\"Auditeur des SI, Pentester junior...\"\n              label=\"Intitulé du poste*\"\n              value={jobTitle}\n              onChangeText={value => setJobTitle(value)}\n              errorMessage={errors.jobTitle}\n            />\n            <Input\n              label=\"Description du poste*\"\n              multiline\n              inputStyle={{ height: 200, textAlignVertical: \"top\" }}\n              placeholder=\"Les missions, les compétences requises, l'employeur...\"\n              value={jobDesc}\n              onChangeText={value => setJobDesc(value)}\n              errorMessage={errors.jobDesc}\n            />\n            <Input\n              label=\"Expérience*\"\n              placeholder=\"Années passées dans un poste similaire\"\n              value={minExp}\n              keyboardType=\"number-pad\"\n              onChangeText={value => setMinExp(value)}\n              errorMessage={errors.minExp}\n            />\n            <Input\n              label=\"Rémunération\"\n              placeholder=\"En €\"\n              keyboardType=\"decimal-pad\"\n              value={salary}\n              onChangeText={value => setSalary(value)}\n              showSoftInputOnFocus={false}\n              errorMessage={errors.salary}\n            />\n            <View\n              style={{\n                marginBottom: 12,\n                flexDirection: \"row\",\n                display: \"flex\",\n                height: 40\n              }}\n            >\n              <Text\n                style={{\n                  color: theme.colors.grey3,\n                  fontWeight: \"bold\",\n                  paddingLeft: 10,\n                  fontSize: 16,\n                  flex: 1,\n                  textAlignVertical: \"center\"\n                }}\n              >\n                Poste à pourvoir dès que possible\n              </Text>\n              <Switch value={asap} onValueChange={value => setAsap(value)} />\n            </View>\n            <Input\n              label=\"Contact\"\n              placeholder=\"Email\"\n              value={contact}\n              onChangeText={value => setContact(value)}\n              errorMessage={errors.contact}\n            />\n            <Button\n              title=\"Poster l'offre d'emploi\"\n              buttonStyle={{ height: 50, marginBottom: 12 }}\n              onPress={() => {\n                uploadJobOffer();\n                navigation.navigate(\"MyJobs\");\n              }}\n            />\n            <View style={{ height: 20 }}></View>\n          </ScrollView>\n        )}\n        {/* {(index === 1 || index === undefined) && (\n          <View style={{ padding: 8 }}>\n            <Input\n              multiline\n              numberOfLines={6}\n              placeholder=\"De quoi souhaitez-vous discuter ?\"\n              value={postText}\n              onChangeText={value => setPostText(value)}\n            />\n            <Button\n              title=\"Publier\"\n              buttonStyle={{ height: 50, margin: 8 }}\n              onPress={() => uploadPost()}\n            />\n          </View>\n        )} */}\n      </View>\n    </View>\n  );\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createJob: job => dispatch(createJob(job)),\n    createPost: post => dispatch(createPost(post))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  textInput: {\n    height: 40,\n    width: 0.9,\n    borderWidth: 1,\n    marginTop: 8\n  }\n});\n"]},"metadata":{},"sourceType":"module"}