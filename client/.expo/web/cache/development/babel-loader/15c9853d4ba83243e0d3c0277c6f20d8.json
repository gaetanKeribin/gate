{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gaetan/Documents/GATE/app/frontend/src/components/CustomOverlay.js\";\nimport React, { useContext, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetOverlay } from \"../actions/overlayAction\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar Notifier = function Notifier(_ref) {\n  var reset = _ref.reset,\n      notification = _ref.notification;\n  if (!notification) return null;\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var dispatch = useDispatch();\n  notification.message && setTimeout(function () {\n    reset();\n    notification.redirect && RootNavigation.navigate(notification.redirect, {});\n    notification.dispatchCallback && dispatch({\n      type: notification.dispatchCallback\n    });\n  }, notification.timeout);\n\n  if (notification.show === true) {\n    return React.createElement(View, {\n      style: {\n        position: \"absolute\",\n        height: Dimensions.get(\"window\").height,\n        width: Dimensions.get(\"window\").width,\n        backgroundColor: theme.colors.grey6,\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }), React.createElement(View, {\n      style: {\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingHorizontal: 12,\n        paddingVertical: 8,\n        elevation: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, React.createElement(Icon, {\n      containerStyle: {\n        marginBottom: 8\n      },\n      size: 30,\n      name: notification.variant === \"success\" ? \"check-circle-outline\" : notification.variant === \"warning\" ? \"alert-circle-outline\" : notification.variant === \"error\" ? \"close-circle-outline\" : notification.icon,\n      color: notification.variant === \"success\" ? \"green\" : notification.variant === \"warning\" ? \"yellow\" : notification.variant === \"error\" ? \"red\" : notification.variant === \"error\" ? \"blue\" : theme.colors.grey1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }), notification.message && React.createElement(Text, {\n      style: {\n        fontSize: 14\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, notification.message)), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    })), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return null;\n};\n\nvar InputForm = function InputForm(_ref2) {\n  var _form$buttons;\n\n  var form = _ref2.form;\n  console.log(\"form\", form);\n  if (!form) return null;\n\n  var _useContext2 = useContext(ThemeContext),\n      theme = _useContext2.theme;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var dispatch = useDispatch();\n  return React.createElement(View, {\n    style: {\n      backgroundColor: \"white\",\n      borderRadius: 10,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      paddingHorizontal: 12,\n      paddingVertical: 8,\n      elevation: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, (_form$buttons = form.buttons) == null ? void 0 : _form$buttons.map(function (button) {\n    return React.createElement(Button, {\n      title: button.title,\n      onPress: dispatch(button.dispatch()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    });\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      alignContent: \"center\",\n      marginTop: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, form.message && React.createElement(Text, {\n    style: {\n      fontSize: 14\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 26\n    }\n  }, form.message)), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      alignContent: \"center\",\n      marginTop: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    value: inputValue,\n    multiline: true,\n    placeholder: \"Ecrivez ici.\",\n    placeholderTextColor: \"grey\",\n    onChangeText: function onChangeText(text) {\n      return setInputValue(text);\n    },\n    style: {\n      backgroundColor: theme.colors.grey5,\n      borderColor: theme.colors.grey4,\n      borderWidth: 1,\n      borderRadius: 5,\n      paddingVertical: 4,\n      paddingHorizontal: 4,\n      maxHeight: 80,\n      alignItems: \"center\",\n      alignContent: \"center\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    containerStyle: {\n      height: 30\n    },\n    icon: React.createElement(Icon, {\n      name: \"send\",\n      size: 20,\n      color: inputValue ? theme.colors.primary : theme.colors.grey2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }),\n    disabled: !inputValue,\n    type: \"clear\",\n    onPress: function onPress() {\n      dispatch(form.action(inputValue));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar CustomOverlay = function CustomOverlay() {\n  var dispatch = useDispatch();\n  var overlay = useSelector(function (state) {\n    return state.overlay;\n  });\n  console.log(overlay);\n  if (overlay.show === false) return null;\n\n  var _useContext3 = useContext(ThemeContext),\n      theme = _useContext3.theme;\n\n  return React.createElement(View, {\n    style: {\n      position: \"absolute\",\n      height: Dimensions.get(\"window\").height,\n      width: Dimensions.get(\"window\").width,\n      backgroundColor: theme.colors.grey6,\n      alignContent: \"center\",\n      justifyContent: \"center\",\n      alignItems: \"stretch\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    containerStyle: {\n      flex: 1,\n      minHeight: 12\n    },\n    style: {\n      flex: 1,\n      minHeight: 12\n    },\n    onPress: function onPress() {\n      return dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    containerStyle: {\n      flex: 1,\n      minWidth: 12\n    },\n    style: {\n      flex: 1,\n      minWidth: 12\n    },\n    onPress: function onPress() {\n      return dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }\n  }), overlay.notification && React.createElement(Notifier, {\n    notification: overlay.notification,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }), overlay.form && React.createElement(InputForm, {\n    form: overlay.form,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 26\n    }\n  }), React.createElement(TouchableOpacity, {\n    containerStyle: {\n      flex: 1,\n      minWidth: 12\n    },\n    style: {\n      flex: 1,\n      minWidth: 12\n    },\n    onPress: function onPress() {\n      return dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    containerStyle: {\n      flex: 1,\n      minHeight: 12\n    },\n    style: {\n      flex: 1,\n      minHeight: 12\n    },\n    onPress: function onPress() {\n      return dispatch(resetOverlay());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    notification: state.notification\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    reset: function reset() {\n      return dispatch(resetOverlay());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomOverlay);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/CustomOverlay.js"],"names":["React","useContext","useState","connect","useDispatch","useSelector","Icon","ThemeContext","Button","resetOverlay","RootNavigation","TouchableOpacity","Notifier","reset","notification","theme","dispatch","message","setTimeout","redirect","navigate","dispatchCallback","type","timeout","show","position","height","Dimensions","get","width","backgroundColor","colors","grey6","alignContent","justifyContent","alignItems","flex","minHeight","flexDirection","minWidth","borderRadius","paddingHorizontal","paddingVertical","elevation","marginBottom","variant","icon","grey1","fontSize","InputForm","form","console","log","inputValue","setInputValue","buttons","map","button","title","marginTop","text","grey5","borderColor","grey4","borderWidth","maxHeight","primary","grey2","action","CustomOverlay","overlay","state","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { Text, View, Dimensions, TextInput } from \"react-native\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetOverlay } from \"../actions/overlayAction\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nconst Notifier = ({ reset, notification }) => {\n  if (!notification) return null;\n  const { theme } = useContext(ThemeContext);\n\n  const dispatch = useDispatch();\n  notification.message &&\n    setTimeout(() => {\n      reset();\n      notification.redirect &&\n        RootNavigation.navigate(notification.redirect, {});\n      notification.dispatchCallback &&\n        dispatch({ type: notification.dispatchCallback });\n    }, notification.timeout);\n\n  if (notification.show === true) {\n    return (\n      <View\n        style={{\n          position: \"absolute\",\n          height: Dimensions.get(\"window\").height,\n          width: Dimensions.get(\"window\").width,\n          backgroundColor: theme.colors.grey6,\n          alignContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"stretch\",\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n        <View\n          style={{\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n          <View\n            style={{\n              backgroundColor: \"white\",\n              borderRadius: 10,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingHorizontal: 12,\n              paddingVertical: 8,\n              elevation: 8,\n            }}\n          >\n            <Icon\n              containerStyle={{ marginBottom: 8 }}\n              size={30}\n              name={\n                notification.variant === \"success\"\n                  ? \"check-circle-outline\"\n                  : notification.variant === \"warning\"\n                  ? \"alert-circle-outline\"\n                  : notification.variant === \"error\"\n                  ? \"close-circle-outline\"\n                  : notification.icon\n              }\n              color={\n                notification.variant === \"success\"\n                  ? \"green\"\n                  : notification.variant === \"warning\"\n                  ? \"yellow\"\n                  : notification.variant === \"error\"\n                  ? \"red\"\n                  : notification.variant === \"error\"\n                  ? \"blue\"\n                  : theme.colors.grey1\n              }\n            />\n            {notification.message && (\n              <Text style={{ fontSize: 14 }}>{notification.message}</Text>\n            )}\n          </View>\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n        </View>\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n      </View>\n    );\n  }\n  return null;\n};\n\nconst InputForm = ({ form }) => {\n  console.log(\"form\", form);\n  if (!form) return null;\n  const { theme } = useContext(ThemeContext);\n  const [inputValue, setInputValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  return (\n    <View\n      style={{\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingHorizontal: 12,\n        paddingVertical: 8,\n        elevation: 8,\n      }}\n    >\n      {form.buttons?.map((button) => {\n        return (\n          <Button title={button.title} onPress={dispatch(button.dispatch())} />\n        );\n      })}\n      <View\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n          marginTop: 8,\n        }}\n      >\n        {form.message && <Text style={{ fontSize: 14 }}>{form.message}</Text>}\n      </View>\n      <View\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n          marginTop: 8,\n        }}\n      >\n        <TextInput\n          value={inputValue}\n          multiline\n          placeholder=\"Ecrivez ici.\"\n          placeholderTextColor=\"grey\"\n          onChangeText={(text) => setInputValue(text)}\n          style={{\n            backgroundColor: theme.colors.grey5,\n            borderColor: theme.colors.grey4,\n            borderWidth: 1,\n            borderRadius: 5,\n            paddingVertical: 4,\n            paddingHorizontal: 4,\n            maxHeight: 80,\n            alignItems: \"center\",\n            alignContent: \"center\",\n            justifyContent: \"center\",\n          }}\n        />\n        <Button\n          containerStyle={{ height: 30 }}\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={inputValue ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!inputValue}\n          type=\"clear\"\n          onPress={() => {\n            dispatch(form.action(inputValue));\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst CustomOverlay = () => {\n  const dispatch = useDispatch();\n  const overlay = useSelector((state) => state.overlay);\n  console.log(overlay);\n  if (overlay.show === false) return null;\n  const { theme } = useContext(ThemeContext);\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        height: Dimensions.get(\"window\").height,\n        width: Dimensions.get(\"window\").width,\n        backgroundColor: theme.colors.grey6,\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\",\n      }}\n    >\n      <TouchableOpacity\n        containerStyle={{ flex: 1, minHeight: 12 }}\n        style={{\n          flex: 1,\n          minHeight: 12,\n        }}\n        onPress={() => dispatch(resetOverlay())}\n      />\n      <View\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minWidth: 12 }}\n          style={{\n            flex: 1,\n            minWidth: 12,\n          }}\n          onPress={() => dispatch(resetOverlay())}\n        />\n        {overlay.notification && (\n          <Notifier notification={overlay.notification} />\n        )}\n        {overlay.form && <InputForm form={overlay.form} />}\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minWidth: 12 }}\n          style={{\n            flex: 1,\n            minWidth: 12,\n          }}\n          onPress={() => dispatch(resetOverlay())}\n        />\n      </View>\n      <TouchableOpacity\n        containerStyle={{ flex: 1, minHeight: 12 }}\n        style={{\n          flex: 1,\n          minHeight: 12,\n        }}\n        onPress={() => dispatch(resetOverlay())}\n      />\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  notification: state.notification,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    reset: () => dispatch(resetOverlay()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomOverlay);\n"]},"metadata":{},"sourceType":"module"}