{"ast":null,"code":"var _jsxFileName = \"/home/gaetan/Documents/GATE/app/frontend/src/components/Notifier.js\";\nimport React, { useContext } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetNotification } from \"../actions/notifyActions\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar Notifier = function Notifier(_ref) {\n  var notification = _ref.notification,\n      reset = _ref.reset;\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var dispatch = useDispatch();\n  notification.message && setTimeout(function () {\n    reset();\n    notification.redirect && RootNavigation.navigate(notification.redirect, {});\n    notification.dispatchCallback && dispatch({\n      type: notification.dispatchCallback\n    });\n  }, notification.timeout);\n\n  if (notification.show === true) {\n    return React.createElement(View, {\n      style: {\n        position: \"absolute\",\n        height: Dimensions.get(\"window\").height,\n        width: Dimensions.get(\"window\").width,\n        backgroundColor: theme.colors.grey6,\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }), React.createElement(View, {\n      style: {\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingHorizontal: 12,\n        paddingVertical: 8,\n        elevation: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, React.createElement(Icon, {\n      containerStyle: {\n        marginBottom: 8\n      },\n      size: 30,\n      name: notification.variant === \"success\" ? \"check-circle-outline\" : notification.variant === \"warning\" ? \"alert-circle-outline\" : notification.variant === \"error\" ? \"close-circle-outline\" : notification.icon,\n      color: notification.variant === \"success\" ? \"green\" : notification.variant === \"warning\" ? \"yellow\" : notification.variant === \"error\" ? \"red\" : notification.variant === \"error\" ? \"blue\" : theme.colors.grey1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), notification.message && React.createElement(Text, {\n      style: {\n        fontSize: 14\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, notification.message)), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minWidth: 12\n      },\n      style: {\n        flex: 1,\n        minWidth: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    })), React.createElement(TouchableOpacity, {\n      containerStyle: {\n        flex: 1,\n        minHeight: 12\n      },\n      style: {\n        flex: 1,\n        minHeight: 12\n      },\n      onPress: function onPress() {\n        return reset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    notification: state.notification\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    reset: function reset() {\n      return dispatch(resetNotification());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifier);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/Notifier.js"],"names":["React","useContext","connect","useDispatch","Icon","ThemeContext","Button","resetNotification","RootNavigation","TouchableOpacity","Notifier","notification","reset","theme","dispatch","message","setTimeout","redirect","navigate","dispatchCallback","type","timeout","show","position","height","Dimensions","get","width","backgroundColor","colors","grey6","alignContent","justifyContent","alignItems","flex","minHeight","flexDirection","minWidth","borderRadius","paddingHorizontal","paddingVertical","elevation","marginBottom","variant","icon","grey1","fontSize","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Text, View, Dimensions } from \"react-native\";\nimport { Icon, ThemeContext, Button } from \"react-native-elements\";\nimport { resetNotification } from \"../actions/notifyActions\";\nimport * as RootNavigation from \"../RootNavigation.js\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nconst Notifier = ({ notification, reset }) => {\n  const { theme } = useContext(ThemeContext);\n  const dispatch = useDispatch();\n  notification.message &&\n    setTimeout(() => {\n      reset();\n      notification.redirect &&\n        RootNavigation.navigate(notification.redirect, {});\n      notification.dispatchCallback &&\n        dispatch({ type: notification.dispatchCallback });\n    }, notification.timeout);\n\n  if (notification.show === true) {\n    return (\n      <View\n        style={{\n          position: \"absolute\",\n          height: Dimensions.get(\"window\").height,\n          width: Dimensions.get(\"window\").width,\n          backgroundColor: theme.colors.grey6,\n          alignContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"stretch\",\n        }}\n      >\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n        <View\n          style={{\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n          <View\n            style={{\n              backgroundColor: \"white\",\n              borderRadius: 10,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingHorizontal: 12,\n              paddingVertical: 8,\n              elevation: 8,\n            }}\n          >\n            <Icon\n              containerStyle={{ marginBottom: 8 }}\n              size={30}\n              name={\n                notification.variant === \"success\"\n                  ? \"check-circle-outline\"\n                  : notification.variant === \"warning\"\n                  ? \"alert-circle-outline\"\n                  : notification.variant === \"error\"\n                  ? \"close-circle-outline\"\n                  : notification.icon\n              }\n              color={\n                notification.variant === \"success\"\n                  ? \"green\"\n                  : notification.variant === \"warning\"\n                  ? \"yellow\"\n                  : notification.variant === \"error\"\n                  ? \"red\"\n                  : notification.variant === \"error\"\n                  ? \"blue\"\n                  : theme.colors.grey1\n              }\n            />\n            {notification.message && (\n              <Text style={{ fontSize: 14 }}>{notification.message}</Text>\n            )}\n          </View>\n          <TouchableOpacity\n            containerStyle={{ flex: 1, minWidth: 12 }}\n            style={{\n              flex: 1,\n              minWidth: 12,\n            }}\n            onPress={() => reset()}\n          />\n        </View>\n        <TouchableOpacity\n          containerStyle={{ flex: 1, minHeight: 12 }}\n          style={{\n            flex: 1,\n            minHeight: 12,\n          }}\n          onPress={() => reset()}\n        />\n      </View>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  notification: state.notification,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    reset: () => dispatch(resetNotification()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifier);\n"]},"metadata":{},"sourceType":"module"}