{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gaetan/Documents/GATE/app/frontend/src/components/Messages/MessagesRoomScreen.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { connect } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport { sendMessage as _sendMessage, fetchConversation as _fetchConversation } from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nvar Message = function Message(_ref) {\n  var message = _ref.message,\n      incoming = _ref.incoming,\n      theme = _ref.theme;\n  return React.createElement(View, {\n    style: {\n      flexDirection: \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, !incoming && React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: {\n      backgroundColor: incoming ? \"white\" : theme.colors.primary,\n      borderTopRightRadius: 10,\n      borderBottomLeftRadius: 10,\n      borderBottomRightRadius: incoming ? 10 : 0,\n      maxWidth: \"80%\",\n      paddingHorizontal: 8,\n      paddingVertical: 8,\n      marginBottom: 8,\n      marginHorizontal: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: !incoming ? \"white\" : \"black\",\n      textAlign: incoming ? \"left\" : \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, message.text)), incoming && React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }\n  }));\n};\n\nvar RoomScreen = function RoomScreen(_ref2) {\n  var chat = _ref2.chat,\n      sendMessage = _ref2.sendMessage,\n      route = _ref2.route,\n      auth = _ref2.auth,\n      fetchConversation = _ref2.fetchConversation;\n  var conversation_id = route.params.conversation._id;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      newMessage = _useState2[0],\n      setNewMessage = _useState2[1];\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var conversation = chat.conversations.filter(function (conv) {\n    return conv._id === conversation_id;\n  })[0];\n  useEffect(function () {\n    function fetchData() {\n      fetchConversation(conversation_id);\n    }\n\n    fetchData();\n  }, []);\n\n  var onSendMessage = function onSendMessage() {\n    if (!newMessage) {\n      return;\n    }\n\n    sendMessage({\n      message: {\n        text: newMessage,\n        sentAt: new Date()\n      },\n      conversation_id: conversation_id\n    });\n    setNewMessage(\"\");\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: conversation.messages,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(Message, {\n        message: item,\n        incoming: item.sender !== auth.user._id,\n        theme: theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    inverted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      backgroundColor: \"white\",\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      alignContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      height: 40,\n      flex: 1\n    },\n    onChangeText: function onChangeText(text) {\n      return setNewMessage(text);\n    },\n    value: newMessage,\n    multiline: true,\n    placeholder: \"Ecrivez votre message ici.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    icon: React.createElement(Icon, {\n      name: \"send\",\n      size: 20,\n      color: newMessage ? theme.colors.primary : theme.colors.grey2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }),\n    disabled: !newMessage,\n    type: \"clear\",\n    onPress: function onPress() {\n      return onSendMessage();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    chat: state.chat,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    sendMessage: function sendMessage(message) {\n      return dispatch(_sendMessage(message));\n    },\n    fetchConversation: function fetchConversation(conversation_id) {\n      return dispatch(_fetchConversation(conversation_id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/frontend/src/components/Messages/MessagesRoomScreen.js"],"names":["React","useContext","useState","useEffect","connect","ThemeContext","Button","Icon","sendMessage","fetchConversation","_","Message","message","incoming","theme","flexDirection","flex","backgroundColor","colors","primary","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","maxWidth","paddingHorizontal","paddingVertical","marginBottom","marginHorizontal","color","textAlign","text","RoomScreen","chat","route","auth","conversation_id","params","conversation","_id","newMessage","setNewMessage","conversations","filter","conv","fetchData","onSendMessage","sentAt","Date","justifyContent","messages","item","sender","user","alignItems","alignContent","height","grey2","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { View, Text, TextInput, FlatList } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport { sendMessage, fetchConversation } from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nconst Message = ({ message, incoming, theme }) => {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\"\n      }}\n    >\n      {!incoming && <View style={{ flex: 1 }}></View>}\n      <View\n        style={{\n          backgroundColor: incoming ? \"white\" : theme.colors.primary,\n          borderTopRightRadius: 10,\n          borderBottomLeftRadius: 10,\n          borderBottomRightRadius: incoming ? 10 : 0,\n          maxWidth: \"80%\",\n          paddingHorizontal: 8,\n          paddingVertical: 8,\n          marginBottom: 8,\n          marginHorizontal: 8\n        }}\n      >\n        <Text\n          style={{\n            color: !incoming ? \"white\" : \"black\",\n            textAlign: incoming ? \"left\" : \"right\"\n          }}\n        >\n          {message.text}\n        </Text>\n      </View>\n      {incoming && <View style={{ flex: 1 }}></View>}\n    </View>\n  );\n};\n\nconst RoomScreen = ({ chat, sendMessage, route, auth, fetchConversation }) => {\n  const conversation_id = route.params.conversation._id;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { theme } = useContext(ThemeContext);\n  const conversation = chat.conversations.filter(\n    conv => conv._id === conversation_id\n  )[0];\n\n  useEffect(() => {\n    function fetchData() {\n      fetchConversation(conversation_id);\n    }\n    fetchData();\n  }, []);\n\n  const onSendMessage = () => {\n    if (!newMessage) {\n      return;\n    }\n    sendMessage({\n      message: {\n        text: newMessage,\n        sentAt: new Date()\n      },\n      conversation_id\n    });\n    setNewMessage(\"\");\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n      <FlatList\n        data={conversation.messages}\n        renderItem={({ item }) => (\n          <Message\n            message={item}\n            incoming={item.sender !== auth.user._id}\n            theme={theme}\n          />\n        )}\n        keyExtractor={item => item._id}\n        inverted={true}\n      />\n      <View\n        style={{\n          flexDirection: \"row\",\n          backgroundColor: \"white\",\n          paddingVertical: 8,\n          paddingHorizontal: 16,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\"\n        }}\n      >\n        <TextInput\n          style={{\n            height: 40,\n            flex: 1\n          }}\n          onChangeText={text => setNewMessage(text)}\n          value={newMessage}\n          multiline\n          placeholder=\"Ecrivez votre message ici.\"\n        />\n        <Button\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={newMessage ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!newMessage}\n          type=\"clear\"\n          onPress={() => onSendMessage()}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    chat: state.chat,\n    auth: state.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    sendMessage: message => dispatch(sendMessage(message)),\n    fetchConversation: conversation_id =>\n      dispatch(fetchConversation(conversation_id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomScreen);\n"]},"metadata":{},"sourceType":"module"}