{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gaetan/Documents/GATE/app/client/src/components/Messages/MessagesRoomScreen.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport { sendPrivateMessage, fetchConversation as _fetchConversation } from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nvar Message = function Message(_ref) {\n  var message = _ref.message,\n      incoming = _ref.incoming,\n      theme = _ref.theme;\n  return React.createElement(View, {\n    style: {\n      flexDirection: \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, !incoming && React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: {\n      backgroundColor: incoming ? \"white\" : theme.colors.primary,\n      borderTopLeftRadius: !incoming ? 10 : 0,\n      borderTopRightRadius: 10,\n      borderBottomLeftRadius: 10,\n      borderBottomRightRadius: incoming ? 10 : 0,\n      maxWidth: \"80%\",\n      paddingHorizontal: 8,\n      paddingVertical: 8,\n      marginBottom: 8,\n      marginHorizontal: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: !incoming ? \"white\" : \"black\",\n      textAlign: incoming ? \"left\" : \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, message.text)), incoming && React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 20\n    }\n  }));\n};\n\nvar RoomScreen = function RoomScreen(_ref2) {\n  var route = _ref2.route;\n  var conversation_id = route.params.conversation_id;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      newMessage = _useState2[0],\n      setNewMessage = _useState2[1];\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      chat = _useSelector.chat,\n      auth = _useSelector.auth;\n\n  var conversation = chat.conversations.filter(function (conv) {\n    return conv._id === conversation_id;\n  })[0];\n  var interlocutors = conversation.participants.filter(function (p) {\n    return p._id !== auth.user._id;\n  });\n  useEffect(function () {\n    function fetchData() {\n      dispatch(_fetchConversation(conversation_id));\n    }\n\n    fetchData();\n  }, []);\n\n  var onSendMessage = function onSendMessage() {\n    dispatch(sendPrivateMessage({\n      text: newMessage,\n      conversation_id: conversation_id,\n      recipient: interlocutors[0]\n    }));\n    setNewMessage(\"\");\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, (conversation == null ? void 0 : conversation.messages) ? React.createElement(FlatList, {\n    data: conversation.messages,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(Message, {\n        message: item,\n        incoming: (item == null ? void 0 : item.sender) !== auth.user._id,\n        theme: theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item == null ? void 0 : item._id;\n    },\n    inverted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }) : React.createElement(ActivityIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      backgroundColor: \"white\",\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      alignContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      height: 40,\n      flex: 1\n    },\n    onChangeText: function onChangeText(text) {\n      return setNewMessage(text);\n    },\n    value: newMessage,\n    multiline: true,\n    placeholder: \"Ecrivez votre message ici.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    icon: React.createElement(Icon, {\n      name: \"send\",\n      size: 20,\n      color: newMessage ? theme.colors.primary : theme.colors.grey2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }),\n    disabled: !newMessage,\n    type: \"clear\",\n    onPress: function onPress() {\n      return onSendMessage();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    chat: state.chat,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchConversation: function fetchConversation(conversation_id) {\n      return dispatch(_fetchConversation(conversation_id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/Messages/MessagesRoomScreen.js"],"names":["React","useContext","useState","useEffect","connect","useDispatch","useSelector","ThemeContext","Button","Icon","sendPrivateMessage","fetchConversation","_","Message","message","incoming","theme","flexDirection","flex","backgroundColor","colors","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","maxWidth","paddingHorizontal","paddingVertical","marginBottom","marginHorizontal","color","textAlign","text","RoomScreen","route","conversation_id","params","newMessage","setNewMessage","dispatch","state","chat","auth","conversation","conversations","filter","conv","_id","interlocutors","participants","p","user","fetchData","onSendMessage","recipient","justifyContent","messages","item","sender","alignItems","alignContent","height","grey2","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  FlatList,\n  ActivityIndicator,\n} from \"react-native\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport {\n  sendPrivateMessage,\n  fetchConversation,\n} from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nconst Message = ({ message, incoming, theme }) => {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n      }}\n    >\n      {!incoming && <View style={{ flex: 1 }}></View>}\n      <View\n        style={{\n          backgroundColor: incoming ? \"white\" : theme.colors.primary,\n          borderTopLeftRadius: !incoming ? 10 : 0,\n          borderTopRightRadius: 10,\n          borderBottomLeftRadius: 10,\n          borderBottomRightRadius: incoming ? 10 : 0,\n          maxWidth: \"80%\",\n          paddingHorizontal: 8,\n          paddingVertical: 8,\n          marginBottom: 8,\n          marginHorizontal: 8,\n        }}\n      >\n        <Text\n          style={{\n            color: !incoming ? \"white\" : \"black\",\n            textAlign: incoming ? \"left\" : \"right\",\n          }}\n        >\n          {message.text}\n        </Text>\n      </View>\n      {incoming && <View style={{ flex: 1 }}></View>}\n    </View>\n  );\n};\n\nconst RoomScreen = ({ route }) => {\n  const conversation_id = route.params.conversation_id;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { theme } = useContext(ThemeContext);\n  const dispatch = useDispatch();\n  const { chat, auth } = useSelector((state) => state);\n  const conversation = chat.conversations.filter(\n    (conv) => conv._id === conversation_id\n  )[0];\n  const interlocutors = conversation.participants.filter(\n    (p) => p._id !== auth.user._id\n  );\n\n  useEffect(() => {\n    function fetchData() {\n      dispatch(fetchConversation(conversation_id));\n    }\n    fetchData();\n  }, []);\n\n  const onSendMessage = () => {\n    dispatch(\n      sendPrivateMessage({\n        text: newMessage,\n        conversation_id,\n        recipient: interlocutors[0],\n      })\n    );\n    setNewMessage(\"\");\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n      {conversation?.messages ? (\n        <FlatList\n          data={conversation.messages}\n          renderItem={({ item }) => (\n            <Message\n              message={item}\n              incoming={item?.sender !== auth.user._id}\n              theme={theme}\n            />\n          )}\n          keyExtractor={(item) => item?._id}\n          inverted={true}\n        />\n      ) : (\n        <ActivityIndicator />\n      )}\n      <View\n        style={{\n          flexDirection: \"row\",\n          backgroundColor: \"white\",\n          paddingVertical: 8,\n          paddingHorizontal: 16,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n        }}\n      >\n        <TextInput\n          style={{\n            height: 40,\n            flex: 1,\n          }}\n          onChangeText={(text) => setNewMessage(text)}\n          value={newMessage}\n          multiline\n          placeholder=\"Ecrivez votre message ici.\"\n        />\n        <Button\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={newMessage ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!newMessage}\n          type=\"clear\"\n          onPress={() => onSendMessage()}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    chat: state.chat,\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchConversation: (conversation_id) =>\n      dispatch(fetchConversation(conversation_id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomScreen);\n"]},"metadata":{},"sourceType":"module"}