{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { connect, useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport { sendPrivateMessage, fetchConversation } from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nvar Message = function Message(_ref) {\n  var message = _ref.message,\n      incoming = _ref.incoming,\n      theme = _ref.theme;\n  return React.createElement(View, {\n    style: {\n      flexDirection: \"row\"\n    }\n  }, !incoming && React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }), React.createElement(View, {\n    style: {\n      backgroundColor: incoming ? \"white\" : theme.colors.primary,\n      borderTopLeftRadius: !incoming ? 10 : 0,\n      borderTopRightRadius: 10,\n      borderBottomLeftRadius: 10,\n      borderBottomRightRadius: incoming ? 10 : 0,\n      maxWidth: \"80%\",\n      paddingHorizontal: 8,\n      paddingVertical: 8,\n      marginBottom: 8,\n      marginHorizontal: 8\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: !incoming ? \"white\" : \"black\",\n      textAlign: incoming ? \"left\" : \"right\"\n    }\n  }, message.text)), incoming && React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }));\n};\n\nvar RoomScreen = function RoomScreen(_ref2) {\n  var route = _ref2.route,\n      conversation = _ref2.conversation;\n  var conversation_id = route.params.conversation_id;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      newMessage = _useState2[0],\n      setNewMessage = _useState2[1];\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }, shallowEqual),\n      user = _useSelector.user;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    function fetchData() {\n      dispatch(fetchConversation(conversation_id));\n    }\n\n    fetchData();\n  }, []);\n\n  var onSendMessage = function onSendMessage() {\n    var interlocutors = conversation == null ? void 0 : conversation.participants.filter(function (p) {\n      return p._id != user._id;\n    });\n    dispatch(sendPrivateMessage({\n      text: newMessage,\n      conversation_id: conversation_id,\n      recipient: interlocutors[0]\n    }));\n    setNewMessage(\"\");\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"space-between\"\n    }\n  }, (conversation == null ? void 0 : conversation.messages) ? React.createElement(FlatList, {\n    data: conversation.messages,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(Message, {\n        message: item,\n        incoming: (item == null ? void 0 : item.sender) !== user._id,\n        theme: theme\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item == null ? void 0 : item._id;\n    },\n    inverted: true\n  }) : React.createElement(ActivityIndicator, null), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      backgroundColor: \"white\",\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      alignContent: \"center\"\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      height: 40,\n      flex: 1\n    },\n    onChangeText: function onChangeText(text) {\n      return setNewMessage(text);\n    },\n    value: newMessage,\n    multiline: true,\n    placeholder: \"Ecrivez votre message ici.\"\n  }), React.createElement(Button, {\n    icon: React.createElement(Icon, {\n      name: \"send\",\n      size: 20,\n      color: newMessage ? theme.colors.primary : theme.colors.grey2\n    }),\n    disabled: !newMessage,\n    type: \"clear\",\n    onPress: function onPress() {\n      return onSendMessage();\n    }\n  })));\n};\n\nexport default connect(function (state) {\n  return {\n    conversation: state.chat.conversations.filter(function (conv) {\n      return conv._id === conversation_id;\n    })[0]\n  };\n}, {})(RoomScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/Messages/MessagesRoomScreen.js"],"names":["React","useContext","useState","useEffect","connect","useDispatch","useSelector","shallowEqual","ThemeContext","Button","Icon","sendPrivateMessage","fetchConversation","_","Message","message","incoming","theme","flexDirection","flex","backgroundColor","colors","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","maxWidth","paddingHorizontal","paddingVertical","marginBottom","marginHorizontal","color","textAlign","text","RoomScreen","route","conversation","conversation_id","params","newMessage","setNewMessage","state","auth","user","dispatch","fetchData","onSendMessage","interlocutors","participants","filter","p","_id","recipient","justifyContent","messages","item","sender","alignItems","alignContent","height","grey2","chat","conversations","conv"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  FlatList,\n  ActivityIndicator,\n} from \"react-native\";\nimport { connect, useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport {\n  sendPrivateMessage,\n  fetchConversation,\n} from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nconst Message = ({ message, incoming, theme }) => {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n      }}\n    >\n      {!incoming && <View style={{ flex: 1 }}></View>}\n      <View\n        style={{\n          backgroundColor: incoming ? \"white\" : theme.colors.primary,\n          borderTopLeftRadius: !incoming ? 10 : 0,\n          borderTopRightRadius: 10,\n          borderBottomLeftRadius: 10,\n          borderBottomRightRadius: incoming ? 10 : 0,\n          maxWidth: \"80%\",\n          paddingHorizontal: 8,\n          paddingVertical: 8,\n          marginBottom: 8,\n          marginHorizontal: 8,\n        }}\n      >\n        <Text\n          style={{\n            color: !incoming ? \"white\" : \"black\",\n            textAlign: incoming ? \"left\" : \"right\",\n          }}\n        >\n          {message.text}\n        </Text>\n      </View>\n      {incoming && <View style={{ flex: 1 }}></View>}\n    </View>\n  );\n};\n\nconst RoomScreen = ({ route, conversation }) => {\n  const { conversation_id } = route.params;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { theme } = useContext(ThemeContext);\n\n  const { user } = useSelector((state) => state.auth, shallowEqual);\n  // const conversation = useSelector(\n  //   (state) =>\n  //     state.chat.conversations.filter((conv) => conv._id === conversation_id)[0]\n  // );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    function fetchData() {\n      dispatch(fetchConversation(conversation_id));\n    }\n    fetchData();\n  }, []);\n\n  const onSendMessage = () => {\n    const interlocutors = conversation?.participants.filter(\n      (p) => p._id != user._id\n    );\n    dispatch(\n      sendPrivateMessage({\n        text: newMessage,\n        conversation_id,\n        recipient: interlocutors[0],\n      })\n    );\n    setNewMessage(\"\");\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n      {conversation?.messages ? (\n        <FlatList\n          data={conversation.messages}\n          renderItem={({ item }) => (\n            <Message\n              message={item}\n              incoming={item?.sender !== user._id}\n              theme={theme}\n            />\n          )}\n          keyExtractor={(item) => item?._id}\n          inverted={true}\n        />\n      ) : (\n        <ActivityIndicator />\n      )}\n      <View\n        style={{\n          flexDirection: \"row\",\n          backgroundColor: \"white\",\n          paddingVertical: 8,\n          paddingHorizontal: 16,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n        }}\n      >\n        <TextInput\n          style={{\n            height: 40,\n            flex: 1,\n          }}\n          onChangeText={(text) => setNewMessage(text)}\n          value={newMessage}\n          multiline\n          placeholder=\"Ecrivez votre message ici.\"\n        />\n        <Button\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={newMessage ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!newMessage}\n          type=\"clear\"\n          onPress={() => onSendMessage()}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    conversation: state.chat.conversations.filter(\n      (conv) => conv._id === conversation_id\n    )[0],\n  }),\n  {}\n)(RoomScreen);\n"]},"metadata":{},"sourceType":"module"}