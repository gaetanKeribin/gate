{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nimport _ from \"lodash\";\n\nvar copyAndUpdate = function copyAndUpdate(array, search, update) {\n  var copy = [];\n\n  var index = _.findIndex(state.conversations, search);\n\n  if (index > 0) updatedArray.concat(array.slice(0, index));\n  updatedArray.concat(_objectSpread({}, array[index], {}, update));\n  updatedArray.concat(index + 1);\n  return updatedArray;\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: returnUpdatedArray(state.conversations, i, action.data.conversation),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"RECEIVE_READ_ACK\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id\n        }),\n        isLoaded: true\n      });\n\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        conversations: [_objectSpread({}, state.conversations[i], {\n          writing: action.wrintingData\n        })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n          return conv._id !== action.message.conversation_id;\n        }))),\n        isLoaded: true\n      });\n\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [returnUpdatedArray(state.conversations, i, _objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: returnUpdatedArray(state.conversations[i].messages, action.message)\n          }))],\n          isLoaded: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [_objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: [action.message]\n          })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n            return conv._id !== action.message.conversation_id;\n          }))),\n          isLoaded: true\n        });\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","_","copyAndUpdate","array","search","update","copy","index","findIndex","state","updatedArray","concat","slice","action","i","type","receivedAt","data","returnUpdatedArray","conversation","_id","conversation_id","writing","wrintingData","filter","conv","message","messages","lastMessage"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nimport _ from \"lodash\";\n\n// {\n//   data: {conversation_id: \"\"},\n//   type: \"RECEIVE_READ_ACK\"\n// }\n\nconst copyAndUpdate = (array, search, update) => {\n  let copy = [];\n  let index = _.findIndex(state.conversations, search); // {_id:\"\"}\n\n  if (index > 0) updatedArray.concat(array.slice(0, index));\n  updatedArray.concat({\n    ...array[index],\n    ...update,\n  });\n  updatedArray.concat(index + 1);\n\n  return updatedArray;\n};\n\nexport default function (state = initialState, action) {\n  let i = _.findIndex(state.conversations);\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: returnUpdatedArray(\n          state.conversations,\n          i,\n          action.data.conversation\n        ),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"RECEIVE_READ_ACK\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: copyAndUpdate(state.conversations, {\n          _id: action.data.conversation_id,\n        }),\n        isLoaded: true,\n      };\n    case \"RECEIVE_WRITING_START\":\n    case \"RECEIVE_WRITING_STOP\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        conversations: [\n          {\n            ...state.conversations[i],\n            writing: action.wrintingData,\n          },\n          ...state.conversations.filter(\n            (conv) => conv._id !== action.message.conversation_id\n          ),\n        ],\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      if (state.conversations[i].messages) {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            returnUpdatedArray(state.conversations, i, {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: returnUpdatedArray(\n                state.conversations[i].messages,\n                action.message\n              ),\n            }),\n          ],\n          isLoaded: true,\n        };\n      } else {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}